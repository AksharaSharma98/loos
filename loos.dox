/*!

\mainpage Lightweight Object-Oriented Structure library (LOOS)

\image html grossfield_logo.jpg

\image html gplv3.png

<hr>
\section copyright Copyright and License

<I>LOOS (Lightweight Object-Oriented Structure library)</I>\n
Copyright &copy; 2008-2009, Tod D. Romo, Alan Grossfield\n
Department of Biochemistry and Biophysics\n
School of Medicine & Dentistry, University of Rochester\n

This package (LOOS) is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation under version 3 of the License.

This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

<hr>

\section Citing
If you use LOOS in your work, please reference the following
publication:

Romo, T.D., Grossfield, A. "LOOS: An extensible platform for the
structural analysis of simulations."  31st Annual International
Conference of the IEEE EMBS (2009): 2332-2335

\verbatim
@InProceedings{loos2009,
  author = 	 {T. D. Romo and A. Grossfield},
  title = 	 {{LOOS}: An Extensible Platform for the Structural Analysis of Simulations},
  pages =	 {2332-2335},
  year =	 {2009},
  volume =	 {31st Annual International Conference of the IEEE EMBS},
  organization = {IEEE EMBS},
}
\endverbatim
<hr>

\section Introduction

Welcome to the LOOS library,  a product of the Grossfield Lab at the University
of Rochester Medical School and the Department of Biochemistry and Biophysics.
The idea behind LOOS is to provide a lightweight C++ library for analysis of
molecular dynamics simulations.  This includes parsing a number of PDB
variants, as well as the native system description and trajectory formats for
CHARMM, NAMD, and Amber.  LOOS is not intended to be an all-encompassing
library and it is primarily geared towards reading data in and processing
rather than manipulating the files and structures and writing them out.

LOOS operates mainly on groups of atoms, called an AtomicGroup.  The
atoms are stored as Boost shared pointers, so multiple groups can
contain the same atom without having to actually copy it.  This does
mean that you should be careful though when modifying an atom since
you may be affecting multiple groups in potentially unknown ways.

For assistance using LOOS, to suggest a patch, to request a feature, or simply
to offer positive feedback, email LOOS-maintainer [AT] urmc.rochester.edu.  The
latest version of LOOS can be found at <A
HREF="http://loos.sourceforge.net">
http://loos.sourceforge.net</A>.

<B> Important information regarding the latest
changes are available here:</B>
	\subpage Changes "Change Log"

\section Features
One of the features of LOOS is the multiple ways it supports atom
selection.  AtomicGroup objects can create subsets of themselves by
using an AtomSelector (a predicate).  There are several useful ones
already pre-defined, such as CAlphaSelector and SolventSelector.
These can even be combined with logical operations.  The
SolventSelector is actually written this way.

Alternatively, LOOS supports selections created from user-input.  LOOS
can parse a selection string (in a format based on C expression
syntax) and use this for picking atoms.  For example, it's trivial to
write you tool so that a user can pick which atoms to consider at
run-time with a string like:
\verbatim
(resid >= 10 && resid <= 100) && (segid == "PROT" || segid == "HEME") && !(name =~ "H")
\endverbatim
which picks atoms with resid's between 10 and 100, a segid of either
"HEME" or "PROT", and all non-hydrogen atoms.  PERL-style regular
expressions are also supported using the "=~" operator.

More information is available here:
     \subpage selections "Selection Language"

\section Applications

Although LOOS is primarily intended as a platform for developing analysis
tools,it is distributed with a number of prebuilt applications, located in
the Tools/ directory.  These tools were developed for use in our research,
but they should be of general utility.  Moreover, they provide examples of
the intended use of the LOOS library, and will probably make helpful
templates for people looking to develop new tools.  

For more information, see the 
    \subpage tools "Tools page"


\section Bugs
There are none...only features.  So don't worry about them!
Email us directly (LOOS-maintainer [AT] urmc.rochester.edu) if you find a bug^H^H^H unintended feature.

\section build Building and Installing
LOOS requires <A href="http://www.scons.org" target="_blank">SCons</A> to build.  It also
requires the vecLib framework and Developer's Tools for OS X or <A
href="http://math-atlas.sourceforge.net" target="_blank">Atlas</A> for Linux.  It also
requires the <A href="http://boost.org" target="_blank">Boost</A> libraries for both
(including the regular expression library).  If you plan to modify the parser (you probably don't), you'll need the
GNU utilities <A href="http://www.gnu.org/software/flex/">flex</A> and
<A href="http://www.gnu.org/software/bison/">bison</A>.  Similarly, if you want to rebuild the documentation, you'll need to install Doxygen.

If your libraries are installed in non-standard locations, you may need to 
tell LOOS where its required components are.  To do this, do the following:
\verbatim
cp custom.py-proto custom.py
\endverbatim
Then edit your \c custom.py file to tell SCons and LOOS where your
libraries are.

\subsection build_fedora Building with Fedora
We recommend you use the the \c yum tool that comes with Fedora to
install the required packages.  You will need, at a minimum, to
install atlas, boost, and SCons.  Fedora splits many packages into the
libraries necessary to run and the libraries and headers necessary for
development.  You will need to be sure to install the development
versions as well, i.e.
\verbatim
yum install boost.x86_64
yum install boost-devel.x86_64
\endverbatim

\subsection build_ubunto Building with Ubuntu
You will need to install atlas, boost, and SCons.  LOOS has been
tested with \c atlas3-sse2-devel and \c boost-devel installed under the
latest Ubuntu.  You should not need to use a custom.py.

\subsection build_other Building with MacOS X

You will need to download and install boost and SCons.  You may also
want to install Doxygen if you want a local copy of the
documentation.  You will also need to create a \c custom.py file to
tell LOOS where to find the libraries and headers that it needs.  Copy
the \c custom.py-proto to \c custom.py and edit it.  In particular, look
at the \c BOOSTREGEX and \c BOOSTPO variables for the boost regular
expression library and program options libraries.  You will most
likely need to change these names...


\subsection compiling Compiling

You can temporarily override the defaults (and what's
set in your \c custom.py file by specifying the appropriate variables
on the command-line (run \c scons \c -h for more information)

To build just the library, cd to the top-level directory and run
SCons:
\verbatim
cd /path/to/LOOS
scons lib
\endverbatim

To build the library and tools as well, use:

\verbatim
scons
\endverbatim

For more detailed information about the build process, see
\subpage building "Building LOOS"

To install LOOS, use the "install" target:

\verbatim
scons install
\endverbatim

This will cause SCons to copy the headers, tools, and library into
 /opt/loos.  You can change where LOOS is installed by changing the
 PREFIX variable in either your custom.py file or on the command
 line.  LOOS will create a /bin, /include, /lib, and /docs directory
 and copy the appropriate files.  The recommended installation
 methodology is to install LOOS into a version-specific directory, and
 then set up a symlink from \c loos-latest to the most recent
 installed version:
\verbatim
scons PREFIX=/opt/loos-1.5.3 install
ln -s /opt/loos-1.5.3 /opt/loos-latest
\endverbatim


\subsection BYO Building Your Own Tools

To use LOOS, you will want to include the top-level LOOS directory in
both your include path and your library paths, so something like the
following for linux
\verbatim
g++ -o mytool mytool.cpp -I/opt/loos/include -L/opt/loos/lib -lloos -lboost_regex -llapack -latlas
\endverbatim
or the following for OS X
\verbatim
g++ -framework vecLib -o mytool mytool.cpp -I/opt/loos/include -L/opt/loos/lib -lloos -lboost_regex
\endverbatim

Keep in mind that the above lines may be greatly oversimplified...
You will almost certainly need to change the names of the libraries to
reflect the versions you have installed, as well as the directories
for the header files.  This can get quite messy.  As such, we strongly
recommend you use either the \c SConstruct/SConscript or the \c
Makefile in the <I>Examples</I> directory as a template for building
your own tools.

\section future Future Plans

<ul>
    <li> Support for other simulation packages (Gromacs, etc)

    <li> Python bindings for easier scripting support
</ul>

*/


/*! \page selections Selection Language

\section Language Description

The selection string parser is a relatively simpled parser patterned
after C/PERL expressions and includes support for PERL-style regular
expressions via Boost.  There are two kinds of literals supported:
strings and numbers.  Numbers are any valid integer.  Strings are
delimited by either single quotes or double quotes, so both of the
following are valid strings: 
\verbatim
"a string"
'another string'
\endverbatim

An important caveat to integer numbers is that LOOS assumes that none
will be negative.  In other words, no atomid nor resid nor number
extracted from a segid (see \ref magops_explained magical ops
below) will evaluate to a 
negative number.  The relational operators &lt; and &lt;= will behave
differently if either operand is a negative number.  In this case,
they will evaluate to false, for reasons that will become obvious when
you read about the magical operators below...

The parser also recognizes a small set of keywords that evaluate to
Atom properties.  These keywords fall into two types as well: those
that evaluate to a number (id, resid) and those that evaluate to a
string (name, resname, segname or segid).  Keep in mind that keywords
are not substitutions, but are more like a pre-defined function that
returns that atom property.  So you cannot put a keyword in a string
and expect it to be substituted with the appropriate value, for example.

\subsection relops Relational Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th> <th>Strings</th><th>Numbers</th><th>Example</th></tr>
<tr align="center"><td>&gt;</td><td>Greater than</td><td>yes</td><td>yes</td><td>resid &gt; 10</td></td>
<tr align="center"><td>&gt;=</td><td>Greater than or equals</td><td>yes</td><td>yes</td><td>resid &gt;= 10</td></td>
<tr align="center"><td>&lt;=</td><td>Less than or equals</td><td>yes</td><td>yes</td><td>resid &lt;= 50</td></td>
<tr align="center"><td>&lt;</td><td>Less than</td><td>yes</td><td>yes</td><td>resid &lt; 50</td></td>
<tr align="center"><td>==</td><td>Exactly equals</td><td>yes</td><td>yes</td><td>name == "CA"</td></td>
<tr align="center"><td>!=</td><td>Doesn't equals exactly</td><td>yes</td><td>yes</td><td>segname != "SOLV"</td></td>
<tr align="center"><td>=~</td><td>Regular expression match</td><td>yes</td><td>no</td><td>name =~ "^(C[A]?|N|O)$"</td></td>
</table>

\subsection logops Logical Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th><th>Example</th></tr>
<tr align="center"><td>&&</td><td>Logical And</td><td>name == "CA" && segid == "PROT"</td></tr>
<tr align="center"><td>||</td><td>Logical Or</td><td>segid == "SOLV" || segid == "BULK"</td></tr>
<tr align="center"><td>!</td><td>Not (Negate)</td><td>!(segid == "SOLV")</td></tr>
</table>


\subsection magops Magical Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th><th>Example</th></tr>
<tr align="center"><td>-></td><td>Extracts a number from a string</td><td>segid -> "L(\d+)"</td></tr>
</table>


\subsection keywords Keywords
<table align="center">
<tr align="center"><th>Keyword</th><th>Atom Property</th><th>Evaluates to...</th><th>Operators</th></tr>
<tr align="center"><td>name</td><td>Atom name</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>id</td><td>Atom ID</td><td>number</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=</td></tr>
<tr align="center"><td>resname</td><td>Residue name</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>resid</td><td>Residue ID</td><td>number</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=</td></tr>
<tr align="center"><td>segid</td><td>Atom segid</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>segname</td><td>Synonym for segid</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>all</td><td>Evaluates to true</td><td>number</td><td></td></tr>
<tr align="center"><td>hydrogen</td><td>Evaluates to true if atom is a hydrogen</td><td>number</td><td></td></tr>
</table>

Notes:\n
The \c all keyword is used to force a selection string to match all
atoms in instances where a selection is required.  For example, a
program to align frames of a trajectory DCD to a reference structure
might require a selection to pick which atoms to use when computing
the rotations and then another selection to pick which atoms are
actually rotated.  If you wanted to apply the rotation to all atoms,
you just use the \c all keyword, i.e.
\verbatim
aligner --selection='name='CA' && segid =~ "BAR[12]"' --transform='all' foo.pdb foo.dcd newfoo
\endverbatim


\subsection regexps Regular Expression Matching
The regular expression matching operator "=~" deserves special
attention.  It's use is more restrictive than the other operators in
that it can only take a keyword that evaluates to a string on the
left-hand side and a string on the right-hand side.  So, the following
expressions are valid:
\verbatim
name =~ "CA"
name =~ "^(C|O|N)$"
segid =~ "PROT|HEME"
\endverbatim
While the following are not valid:
\verbatim
resid =~ "10[0-9][0-9]"
segid =~ 0010
name =~ resname
\endverbatim

The regular expression syntax supported is the PERL syntax as
implemented by the Boost libraries.  While you can write regular
expressions that look a lot like globbing (a la VMD selections), keep
in mind that it isn't globbing.  It's a regular expression, which is
more powerful anyway...  You do need to be careful though that your
shell does not munge any of the regex operators.  It's a good idea to
use single quotes when you're writing regex's in a shell.

The string equality operators ("==" and "!=") both consider the
<I>entire</I> string.
\verbatim
"CA" == "C"  --> false
 "C" == "C"  --> true
\endverbatim
You can use the "=~" operator to perform a substring match.
\verbatim
"CA" == "C"  --> false
 "C" == "C"  --> true
"CA" =~ "C"  --> true
\endverbatim
This brings up an important point about using regular expressions: be
careful of unexpected substring matches.  For example, let's say you
are wanting to pick out all backbone atoms and you write this
selection string:
\verbatim
name =~ "C|CA|O|N"
\endverbatim
Now look what happens when the following atom names are matched:
\verbatim
 "CG" --> true
"CD1" --> true
 "NE" --> true
"OH2" --> true
\endverbatim
The problem is that the regular expression is not constrained, so even
though you explicitly put "CA" and "CB" in there, you also have a "C"
which says <I>any</I> atom name with a "C" in it is a match.  If
you want to match a string <I>exactly</I> with a regular expression,
you must anchor it:
\verbatim
name =~ "^(C|CA|CB|O|N)$"
\endverbatim

\subsection magops_explained Magical Operations
There is currently only one "magical operator" defined: "->".  This
operator takes a string keyword on the left-hand side (i.e. name,
resname, or segid/segname) and a string on the right-hand side
representing a regular expression pattern.  It will then try to
extract a numeric value (integer) from the subexpression matches.  For
example, suppose you have a range of segments that all follow a
pattern such as "PG1", "PG2", "PG3", ..., "PG120".  The regular
expression "PG(\d+)" matches these and the pattern within the
parenthesis is a subexpression.  So,
\verbatim
(segid->"L(\d+)") >= 10 && (segid->"L(\d+)") <= 50
\endverbatim
will match segid's "L10" through "L50".  Since each matched
subexpression will be examined for a valid integer conversion, the
following will work as expected:
\verbatim
segid->"(L|PG)(\d+)"
\endverbatim

There is a small hitch with the magical operator.  If there is no
match, it evaluates to -1.  But this is a valid int, so you cannot do
the following:
\verbatim
segid->"L(\d+)" <= 100
\endverbatim
since it will match all segids.  You can't, unless the &lt;= operator
is also a little bit special.  Fortunately, it is.  If either operand
is a negative number, both the &lt; and &lt;= operands assume that
this is a flag for a null-match, and will result in a false value
being returned.  It's a bit of a kludge, but it works...

<hr>
\section kahuna Putting It All Together...
When you perform a selection on an AtomicGroup using the selection
language, the expression is evaluated once for each atom in the
group.  If it evaluates to "true" (integer 1), then the atom is added
to the new selection.  Only one atom is considered at a time.

Here are some example selections:
\verbatim
Extract C-alphas:
  name == "CA"

Solvent:
  segid == "SOLV" || segid == "BULK"

Solvent heavy atoms (oxygens only)
  name =~ "O" && (segid == "SOLV" || segid == "BULK")

C-alphas from a range of residues:
  name == "CA" && resid >= 10 && resid <= 50
\endverbatim

\subsection Usage
Most tools based on LOOS will accept selection strings from the
command-line.  They must be enclosed in quotes though so they are all
one argument to the tool.  If you're using regular expressions, it's a
good idea to use single quotes to prevent your shell from
misinterpreting the regular expression operators and as mentioned
before, back-slash escapes may need doubling.

You can store your selection in a file if you want.  To use it then,
use the back-quote feature of your shell to "cat" your selection
file.  Since your selection must be one argument, you must enclose the
back-quote within double-quotes, i.e.
\verbatim
  a_tool_name "`cat myselection.txt`" arg arg arg
\endverbatim

If you store your selection in a file, then you can also use
comments.  A comment is anything after a "#" on a line.  Here's an
example of a selection in a file:
\verbatim
### Select water oxygens only...
# Pick out any atom that contains an oxygen
name =~ "O" &&
(segid == "SOLV" || # any segment named SOLV
segid == "BULK")    # or named BULK
\endverbatim


*/



/*! \page building Building LOOS

\section Build Configuration

There are several build targets available:

<table align="center">
<tr align="left"><th>Target</th><th>Description</th></tr>
<tr align="left"><td>(default)</td><td>Build the library and the tools</td></tr>
<tr align="left"><td>lib</td><td>Builds the library only</td></tr>
<tr align="left"><td>tests</td><td>Builds and runs the verification tests</td></tr>
<tr align="left"><td>docs</td><td>Uses Doxygen to generate new docs.</td></tr>
<tr align="left"><td>caboodle</td><td>Builds everything, including docs and tests</td></tr>
</table>

There are several different build options that are available for
LOOS.  These are handled on the command-line by SCons as "foo=1" to
turn the option on or "foo=0" to turn it off.  Most options default to
off.  Finally, you can query the available options by passing the "-h"
flag to SCons.  The following table lists the principal build options:

<table align="center">
<tr align="left"><th>Option</th><th>Default</th><th>Description</th></tr>
<tr align="left"><td>debug</td><td>0</td><td>Adds "-DDEBUG" to build</td></tr>
<tr align="left"><td>release</td><td>0</td><td>Turns on aggressive optimization (-O3)</td></tr>
<tr align="left"><td>regenerate</td><td>0</td><td>Regenerates the test verification data</td></tr>
<tr align="left"><td>reparse</td><td>0</td><td>Runs bison/flex to create the C++ files for parsing selections</td></tr>
</table>

\subsection Regeneration
The verification tests include sample output that is compared against
the current build.  If differences are found, they are flagged as
potential problems with the library.  If you update a test, change
systems (such as running on OS X as opposed to Linux), or perhaps
didn't get the test data from the SVN, then you will need to 
generate new test data and verify it manually.  To do so, use the
SCons command:
\verbatim
scons regenerate=1 tests
\endverbatim

\subsection Reparsing
To remove the dependency on Bison/Flex, the output from these tools
for the grammar and scanner are included.  If you want to rebuild
them, you will need to use the 'reparse=1' option.  The catch is that
if you have a different version of flex installed, there is a good
chance there will be a conflict with the bundled FlexLexer.h include
file.  If you see odd compiler errors, try removing that file and
rebuilding.  Alternatively, forcibly remove all generated files by
doing "rm *.cc *.hh" (assuming you've added no files with those
suffixes), then rebuild.

\subsection Distro Building a distribution
To build a distribution that doesn't require Doxygen and Bison/Flex,
the following is recommended:
\verbatim
scons regenerate=1 tests
scons docs
scons -c tests
\endverbatim

As a side-note, regenerating the verification data is potentially
hazardous if you have not been making sure your builds already pass,
so caveat bugger...

*/

/*! \page tools Summary of Tools

Below is a summary of the tools currently distributed with LOOS.  To get a
detailed summary of the command line arguments, run the program without
arguments or using "-h".  A growing number of tools also support the
"--fullhelp" options, which will display more detailed help
information including examples of how to use the tool.  All of the tools are now package agnostic, in the sense that they will take any of the file formats supported by LOOS as input.

At present, LOOS assumes that all periodic boxes are rectangular, and
will produce incorrect answers if trajectories using different box shapes
(eg truncated octahedron) are used in programs which make use of
periodicity (eg rdf).  We have no immediate plans to generalize the code to handle other periodicities, but are willing to reconsider if there is significant demand from users.


<HR>

<DL>

  <DT> <B><I>ENM Elastic Network Models</I></B>
  <DD> A collection of tools for working with ENMs:
    <DL>
      <DT> <B>anm</B>
      <DD> Computes the anisotropic network model for a structure

      <DT> <B>gnm</B>
      <DD> Computes the gaussian network model for a structure

      <DT> <B>vsa</B>
      <DD> Computes the vibrational subsystem analysis model for a structure

      <DT> <B>psf-masses</B>
      <DD> Copies atom masses from a PSF into the occupancy field of a PDB

      <DT> <B>heavy-ca</B>
      <DD> Places the total mass for a residue into its CA (for a PDB with masses)

      <DT> <B>enmovie</B>
      <DD> Creates a DCD depicting motion along the axes taken from an ENM result

      <DT> <B>flucc2b</B>
      <DD> Computes B-values based on ENM 

   </DL>

   <DT> <B>aligner</B>
   <DD> Align structures in a trajectory against the average using an
   iterative refinement scheme.  Can read any LOOS trajectory format, but
   will write the aligned trajectory as a DCD.

   <DT> <B>atomic-rdf</B>
   <DD>Compute the radial distribution function for 2 selections of atoms taken
   from a trajectory, treating each selection as a set of individual atoms.
   For contrast, see rdf.

   <DT><B>averager</B>
   <DD>Compute the average structure for a set of molecules from a trajectory,
   using an iterative scheme.

   <DT><B>blurrogram.pl</B>
   <DD>A PERL tool for creating "blurrogram" style figures with Pymol.

   <DT><B>bounding</B>
   <DD>Write out the bounding box for a selection of atoms from a structure file.

   <DT><B>center-molecule</B>
   <DD>A more flexible tool for centering molecules.  Can use
   different subsets for calculating the center, controlling what is
   translated, and what goes to the output.  It can also reimage the
   molecule and center only within the x,y plane.

   <DT><B>center-pdb</B>
   <DD>Read in a structure file, shift its centroid to the origin, and write a new
   pdb file to stdout.  

   <DT><B>clipper</B>
   <DD>Manually clip a model using arbitrary sets of clipping planes.  Outputs a PDB.
   
   <DT><B>concat-selection</B>
   <DD>Concatenates atoms from a trajectory into a single PDB.  Useful
   for seeing where something has been...
   
   <DT><B>contact-time</B>
   <DD>This tool computes the number of contacts between a probe
   selection and a set of target selections.  The output is in the
   form of a matrix and can be normalized by either total number of
   contacts (across the row) or by the maximum # of contacts per
   target (down the column).  In addition, it can automatically split
   the probe into separate molecules, based on their segids, and
   compute the inter-probe contacts as well.

   <DT><B>contacts</B>
   <DD>Loop over a trajectory and count the number of contacts between two
   sets of atoms.  

   <DT><B>convert2pdb</B>
   <DD>Read in a structure file in a LOOS-supported format, and write it out as 
   a pdb file.

   <DT><B>crossing-waters</B>
   <DD>Loop over a trajectory and compute the number waters crossing a membrane.

   <DT><B>dcdinfo</B>
   <DD>Extract the header information from a CHARMM/NAMD dcd file.  Will
   verify the number of frames present and report periodic box
   information.

   <DT><B>density-dist</B>
   <DD>Compute the charge/electron/mass density distribution for the system along
   the z-axis. Produces the distribution for the whole system and an arbitrary
   number of selections.  Requires a structure file format which supplies 
   mass and/or charge.

   <DT><B>density-dist-windowed</B>
   <DD>Compute the charge/electron/mass density distribution for the system along
   the z-axis for blocks of time within a trajectory, producing a density
   distribution time series.  

   <DT><B>drifter</B>
   <DD>Calculates movement centroids over a trajectory

   <DT><B>dumpmol</B>
   <DD>Outputs the low-level AtomicGroup representation for a model.
   Useful for double-checking LOOS' parsing of a file.

   <DT><B>exposure</B>
   <DD>Computes the degree of exposure of a set of selections over
   time.  The exposure is defined as the average density of a probe
   selection within a spherical shell about each target atom.  This
   tool can be used to determine how exposed to solvent a selection
   is, or alternatively how buried a selection is.

   <DT><B>frame2pdb</B>
   <DD>Extract a frame from a trajectory and write it as a pdb file.

   <DT><B>helix_kink</B>
   <DD>Given two selections and a trajectory, compute the time series of the 
   angle between their principal components.  Also useful for measuring domain hinge motions.

   <DT><B>interdist</B>
   <DD>Calculates distances between a selection and an aribtrary set of other
   selections over a trajectory.  The distance computed can be the
   distance between the centroids, the minimum distance between any atom
   in any group, or the max distance between any atom in any group.

   <DT><B>merge-dcd</B>
   <DD>Merges DCDs by appending.  Can also concurrently downsample the
   trajectory to another DCD.

   <DT><B>model-select</B>
   <DD>Takes a model (PDB, PSF, etc) and a selection string.  Parses the selection,
   then applies it to the PDB and writes the output to stdout.  This tool is used
   mainly for checking your selection strings to make sure you're actually
   selecting what you intend to select.

   <DT><B>model2matlab</B>
   <DD>Takes a PDB and a selection and an optional selection and writes out
   the coordinates to stdout in matlab format.

   <DT><B>octavex</B>
   <DD>Extract embedded OCTAVE data from a LOOS output/log.  This is
   used with aligner.

   <DT><B>order_params</B>
   <DD>Compute the deuterium quadrupolar splitting order parameters for lipid
   molecules.  The model file must have connectivity information.

   <DT><B>paxes</B>
   <DD>Computes the magnitude of the principal axes of a set of selections
   over the trajectory.  This can be used to analyze shape changes over
   time.

   <DT><B>porcupine</B>
   <DD>Creates a faux-PDB containing atoms/bonds that represent a "porcupine"
   figure for a column vector from a matrix.  This can be used to
   visualize the direction of motion from SVD and ENM results.

   <DT><B>ramachandran</B>
   <DD>Computes a ramachandran map for a given selection of a specified range
   of frames in a trajectory (or all frames).  Note that some torsions
   may be missing for the residues at the ends of the selection.  To
   avoid this, expand your selection by a residue in both directions,
   then use the "--skip" flag.

   <DT><B>rdf</B>
   <DD>Loop over a trajectory file and compute the radial distribution function
   for two selections.  The selections are split up by molecule and the center
   of mass is used.  For example, selecting all water molecules will cause it
   to compute the radial distribution of the centers of mass of individual
   water molecules.  For contrast, see atomic-rdf.

   <DT><B>rebond</B>
   <DD>Distance-based search for bonds, that are explicitly added to
   the output PDB.  Use this tool to visualize your ENM networks, or
   to reconnect CA traces from SVD results...

   <DT><B>recenter-trj</B>
   <DD>Loop over a trajectory, translating the entire system such that the selected
   portion remains at the origin, and reimaging the rest on a molecule by 
   molecule basis.  It can also just do translations in the z-dimension.  The
   model file must have connectivity information, and the trajectory must have
   periodic box information.  This program writes a DCD file as
   output.

   <DT><B>reimage-by-molecule</B>
   <DD>Reads a trajectory, and writes a new DCD which has been reimaged on a molecule
   by molecule basis.  The model file must have connectivity information, and the
   trajectory must have periodic box information.

   <DT><B>renum-pdb</B>
   <DD>Used primarily to renumber atoms/residues in a PDB...but it can
   work with any LOOS-supported format.

   <DT><B>rgyr</B>
   <DD>Loop over a trajectory and compute the radius of gyration for a selection of 
   atoms.  Optionally, it can break your selection into individual molecules, 
   if for example you have multiple solutes in the system.

   <DT><B>rmsd2ref</B>
   <DD>Computes rmsds between a selection and either its average conformation or a
   reference model, optionally aligning the selection.

   <DT><B>rmsfit</B>
   <DD>Superimpose two structures using Kabsch RMS alignment.

   <DT><B>rmsds</B>
   <DD>Loops over a trajectory and computes the pairwise RMSDs for a selection of
   atoms.

   <DT><B>rotamer</B>
   <DD>Computes the chi-1 and chi-2 angles for a given selection over an
   entire trajectory.

   <DT><B>subsetter</B>
   <DD>Subsets a trajectory (stripping out any atoms that don't match the
   given selection), and writes a new DCD file.  Can be used to
   concatenate trajectories, pull specific frames out, as well as
   adjusting periodic box information and centering the trajectory on a
   selection.  Since trajectories are often stored in files with an
   ascending numerical sequence name (i.e. frame_1.dcd, frame_2.dcd,
   etc), and since the shell globbing doesn't sort these in numerical
   order, a command such as
<PRE>subsetter foo model.pdb frame_*.dcd</PRE>
   will not concatenate your frames in the order you want.  You can tell
   subsetter to sort the input trajectories so that they are in numerical
   order by using the "--sort" flag.  For more detailed information, use
   the "--fullhelp" option with subsetter.

   <DT><B>svd</B>
   <DD>Performs principal component analysis for a trajectory using singular value
   decomposition, writing out the eigenvalues, left singular vectors
   (eigenvectors) and the right singular vectors (projection timeseries) as
   OCTAVE-formatted text files.

   <DT><B>svdcolmap</B>
   <DD>Map the magnitude of a left singular vector onto a PDB file's B-value
   column.  Useful for visualizing which portions of a molecule are mobile for
   a given SVD mode.

   <DT><B>torsion</B>
   <DD>Given 4 selections, compute the torsion angle for their centroids.  This 
   program loops over a trajectory and writes the torsion angle time series.

   <DT><B>traj2dcd</B>
   <DD>Converts a LOOS-supported format to a DCD.

   <DT><B>trajinfo</B>
   <DD>Similar to dcdinfo, but works with generic trajectories.  Can report
   box information and the centroid of a selection.  Useful for verifying
   trajectory header information and extracting the number of frames and
   atoms in a trajectory.

   <DT><B>xy_rdf</B>
   <DD>Compute a two dimension radial distribution function in the xy plane,
   splitting the system into upper and lower leaflets.  Primarily intended for
   analyzing lateral organization of lipid-water interfaces.  

   <DT><B>xy_rdf_timeseries</B>
   <DD>Same as xy_rdf, except producing a series of block averages rather than
   averaging over the whole trajectory.  
</DL>

*/




/*! \page Changes Change Log
\section release153 Version 1.5.3 (2-19-2010)
\subsection r153_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> PDB::fromAtomicGroup() now generates a UnitCell if the
       passed AtomicGroup has periodic boundary information.  This
       means that the output PDB will have a CRYST1 record.
  <LI> Added a more flexible centering tool called center-molecule
  <LI> Added a new tool for computing inter-selection contacts
       over time called contact-time
  <LI> Changed exposure tool to default to reimaging
  <LI> Added alignto tool for aligning a trajectory to a reference
  structure
  <LI> Added a set of generic sorting functions
  <LI> Added support for single and double precision matrix
  operations.  Note that these are for "quick-and-dirty" work and are
  not meant to give good performance...
  <LI> ENM tools sort their output from smallest to largest
  eigenvalue, and the zero eigenpairs always come first
  <LI> Added a VSA tool (along with psf-masses and heavy-ca tools for
  getting mass information into the VSA tool)
  <LI> Added covariance and subspace overlap functions
  <LI> Changed DCDWriter so that it can now append to an existing DCD
  <LI> Changed ENM tools use a Hessian constructor that's in a
  separate module, along with different methods for handling the
  spring constants via a polymorphic "superblock" object pointer...
  This will make more sense looking at the code itself...
</UL>

\subsection r153_bugs Bug Fixes
<UL>
  <LI> Fixed bugs in subsetter affecting reimaging only occuring if
  centering was turned on, and one causing bonds not to be cleared
  when subsetting.
  <LI> Fixed bug in extractCoords() causing it to always fail.
  <LI> Fixed bug in enmovie tool affecting connectivity not being
  cleared and atom number mismatches between the reference PDB and the
  DCD.
  <LI> Fixed bug in svd function that takes a vector<AtomicGroup>, but
  only when aligning was requested.  The alignment transform was
  doubly-applied to the passed vector.  No tools were affected by
  this.  No other invocations of svd() were affected either.
  <LI> Fixed bug in aligner where the target selection was not always
  correctly centered.  It would be aligned correctly, just not always
  centered...

\section release152 Version 1.5.2 (10-9-2009)
\subsection r152_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Changed AtomicGroup::principalAxes() so that it scales the
  eigenvalues by the number of atoms.
</UL>

\subsection r152_bugs Bug Fixes
<UL>
  <LI> Fixed bug where segname was not correctly handled as a synonym
  for segid.
  <LI> Fixed bug affecting Amber restart files.  These are handled as
  a special trajectory with one frame, but the readFrame() iterator
  was not correctly set so the first call would return a false,
  indicating that all frames had been read.
  <LI> Fixed another issue with Amber restart files that may have
  slight variations in formatting.  This affected restart files that
  only have the number of atoms in the header rather than the number
  of atoms and the time.
</UL>

\section release151 Version 1.5.1 (9-21-2009)
\subsection r151_bugs Bug Fixes
<UL>
  <LI> Fixed bug in install target where trr.hpp was not copied to the
  installation directory.
</UL>

\section release150 Version 1.5.0 (9-17-2009)
Many of the changes in this version are internal (primarily as new
functions and features).  The big change is that LOOS now supports
Gromacs .gro, .trr, and .xtc file formats.  Since Gromacs stores
coordinates in nm, LOOS converts the coordinates into Angstroms upon reading.
LOOS only supports single precision .xtc files.

<em>Important note regarding Gromacs support:  While we have tested
the gromacs support with a limited set of sample files, the code has
not been as rigorously tested as support for previous formats have
been.  Gromacs support should therefore be considered experimental at
this stage.  Please report any problems or errors to as at
loos_maintainer [at] urmc.rochester.edu</em>

LOOS now also uses the hybrid-36 encoding method for PDB files with a
large number of atoms or residues.  See <A
href="http://cci.lbl.gov/hybrid_36">here</A> for more information.

\subsection r150_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Added AtomicGroup::findBonds() to perform a simple
  distance-search for bonds.
  <LI> Added support for testing Atom equality.  See loos::AtomEquals,
  loos::AtomCoordsEquals for more information.
  <LI> Added loos::AtomicGroup::contains() and loos::AtomicGroup::intersect() for
  set operations.
  <LI> Added new bits to loos::Atom that can be used as flags (i.e. flagbit,
  usr1bit, ...)
  <LI> Added Gromacs classes: loos::Gromacs, loos::TRR, and loos::XTC.
  <LI> Changes to the Trajectory class and subclasses:
  <UL>
	<LI> Changed the underlying stream type to iostream.  This
	should not break anything unless you have subclassed
	Trajectory for your own purposes.
	<LI> Implementation functions are now private.
	<LI> Added some missing constructors in the subclasses.
  </UL>
  <LI> Added some utilities for parsing strings
  (loos::parseStringAs<>())
  <LI> Added new formatters for matrix output that make it easier to
  set the width and precision of the matrix elements, or write them
  out in scientific notation (i.e. loos::ScientificMatrixFormatter)
  <LI> Added Hybrid-36 support to PDB's (both reading and writing)
  <LI> rmsds can now work with a subset of frames from a trajectory
  <LI> subsetter can now reimage
  <LI> SVD now will only write out the non-zero terms of the SVD
  rather than the entire matrix.
  <LI> Added a "not" operator to the selection language so there's no
  more fighting with the shell over '!'.
  <LI> Some tools have been updated internally to be more
  consistent with the current LOOS idioms...  There may be minor
  changes in usage:
  <UL>
	<LI> SVD now requires a 1 or 0 for the -S option
  </UL>
  <LI> New tools:
  <DL>
	<DT> molshape
	<DD> Reports statistics about a selection (i.e. extents,
	radius of gyration, location of centroid, principal axes, etc)

	<DT> native_contacts
	<DD> Compute the fraction of native contacts in a trajectory
	based on an initial structure
  </DL>
</UL>

\subsection r150_bugs Bug Fixes
<UL>
  <LI> Fixed bug in loos::writeAsciiMatrix() when only writing a subset of a
  matrix.
  <LI> Fixed bug in bounding tool's box size
  <LI> Fixed problem with spurious rebuilds of all of LOOS with
  SCons.
  <LI> Fixed bug in loos::DCD::updateGroupCoords where the upper-bounds
  check on atomid's was incorrect.
</UL>


\section release140 Version 1.4.0 (6-26-2009)
There has been a change in philosophy of how LOOS handles system
descriptions vs models/trajectories/coordinates.  Previously, LOOS
would try to create an AtomicGroup that had complete information, such
as when given an Amber prmtop file.  In this case, LOOS would go
looking for a file with the same name ending in ".inpcrd" and load
this in with the prmtop file.  Now, LOOS will treat coordinate files
as a special trajectory that has only one frame.  This way, most tools
that can operate over a trajectory can also operate on a single model,
and vice versa.  For example, the following are all valid:
\verbatim
ramachandran --pseuo foo.prmtop foo.rst all
ramachandran --pseudo foo.prmtop foo.mdcrd all
ramachandran foo.psf foo.dcd all
ramachandran foo.psf foo.pdb all
ramachandran foo.pdb foo.pdb all
\endverbatim

This can lead to the somewhat awkward usage in the last example, but
think of it as the first PDB provides the system description and the
second provides the actual model, even though they're both the same.

\subsection r140_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Added an AtomNameSelector() to match arbitraty atoms
  <LI> Added centerOfElectrons() to AtomicGroup class
  <LI> Added support for Tinker file formats in the factory functions
  <LI> Added a renum-pdb tool for renumbering models
  <LI> Added interdist tool for calculating distances between selections
  <LI> Added support for numerically sorting the input trajectory
  filenames in subsetter.  See the tool documentation above for more
  information.
  <LI> Added a porcupine tool for creating porcupine plots for SVD/ENM
  results
  <LI> Added paxes tool for computing the principal axes magnitudes
  (i.e. eigenvalues) of a set of selections over a trajectory.
  <LI> Added drifter tool for tracking centroid movement
  <LI> Added a ramachandran tool for calculating ramachandran maps
  <LI> Added a "rotamer" tool for calculating the chi-1, chi-2 torsion
angles for side-chains.
  <LI> Added "rmsfit" tool to superimpose one model upon another
  <LI> Added a suite of Elastic Network Modeling tools inside Tools:
  <UL>
     <LI> "anm" calculates an anistropic network model
     <LI> "gnm" calculaes a gaussian network model
     <LI> "flucc2b" maps anm/gnm fluctuations onto a PDB's B-values
     <LI> "enmovie" creates a DCD trajectory showing motion based on
anm/gnm results.
  </UL>
  <LI> Reduced the size of the test files
  <LI> Added an install target for SCons
  <LI> Added support for building a shared-library version of LOOS
  <LI> Added a special SCons check for ubuntu.  Some systems appear to
  have an issue where they require the gfortran lib to be explicitly
  linked.  If this causes an issue for you, simply comment out the
  ubuntu check in the SConstruct.
</UL>

\subsection r140_internal Internal Changes
<UL>
  <LI> Changed how Trajectory classes work slightly...
  Trajectory-derived classes must now read in and cache the first
  frame of the trajectory as part of their initialization.
  <LI> CAlphaSelector() is now deprecated; use AtomNameSelector("CA")
  instead.
  <LI> Added a set of classes for providing user-feedback when a tool
  may take some time to execute.  See loos::ProgressCounter for more
  information, and the rmsds tool for an example of how to use the new
  classes.
  <LI> Removed the use of BOOST_FOREACH.  This solves a compatability
  issue with older versions of BOOST and LOOS.
  <LI> Added a number of support utilities for reading in whole
  trajectories and reading in specific frames.
  <LI> The ensemble functions (i.e. align and average) can now operate
  over a user-specified set of frames from a trajectory.
  <LI> Added AtomicGroup::splitByResidue() that splits up a group by
  residue (based on changes in resid and/or segid), returning a
  vector<AtomicGroup>.
  <LI> The createSystem factory function now no longer tries to
  automatically find and import an Amber coord file when reading in a
  PRMTOP.  In addition, the Amber::readCoords() function has been
  removed.
  <LI> Added support for Amber restart and coord files as a special
  1-frame trajectory.  This is transparently handled by the
  createTrajectory factory function.
  <LI> The Trajectory class now uses NVI for the seek and rewind
  member functions so it can impose some pre-conditions.  This means
  the Trajectory base class handles the cached_first flag.  Unless
  you're writing your own trajectory class, this wont affect you.  If
  you are, it means the seek and rewind functions are now handled by
  rewindImpl(), seekImpl(), etc.

</UL>

\subsection r140_bugs Bug Fixes
<UL>
  <LI> Fixed bug in subsetter where verbose output was always on.
  <LI> Fixed bug in subsetter where out of range frame indices would
  cause a seg-fault.
  <LI> Fixed bug in rmsds that caused the average rmsd to be
  calculated incorrectly.
  <LI> Fixed some issues with the SConstruct file
  <LI> Fixed a problem with averager where it was caching all frames
  of the trajectory causing swapping for large trajectories
</UL>


\section release134 Version 1.3.4 (2-16-2009)
\subsection r134_bugs Bug Fixes
<UL>
  <LI> Fixed bug in aligner affecting centering the trajectory while
using different alignment and transformation subsets.  The output
trajectory was incorrectly transformed.  The error committed is
proportional to the difference in the centroids between the two
subsets...
</UL>



\section release133 Version 1.3.3 (2-9-2009)
\subsection r133_added_changed Added, Changed, or Notables
<UL>
  <LI> Added recenter-trj tool to center trajectories
  <LI> Added trajinfo tool to print out information about generic
  trajectories.  This tool will also verify the number of frames
  actually present in the trajectory.
  <LI> Added concat-selection tool to concatenate atoms from a
  trajectory into a single PDB.  This is useful for visualization atom
  distributions over the entire trajectory
  <LI> Added blurrogram.pl, a PERL script to aid in creating
  "blurrogram" figures using Pymol
  <LI> Added AtomicGroup::translate()
  <LI> The frame2pdb tool now accepts a selection (subset) to write
  out
  <LI> The svd tool always writes out an average structure now
  <LI> The subsetter tool can now accept a list of aribtrary ranges of
  frames to extract, or a stride option.  It can also take an
  arbitrary list of input trajectories to combine and extract from.
  In addition, it can override or add periodic box information.
  <LI> The DCD class will now handle reading of non-native endian DCD
  files
  <LI> The DCDWriter class will now flush the output streams after
  each frame is written to ensure all data is actually written to disk
</UL>

\subsection r133_bugs Bug Fixes
<UL>
  <LI> Fixed an issue with DCD's written by LOOS that have periodic
  boundary information.  The default unit cell angles were 1, rather
  than 90 degrees.  This prevents programs like VMD from correctly
  displaying the periodic images.
  <LI> Fixed a typo in the default alignment selection for the
  rmsd2ref tool
  <LI> Fixed a bug in several tools that affected using a PSF file for
  the model when writing out a PDB file that had been subset with a
  selection.
  <LI> The loos::averageStructure() function did not verify that the
  input vector<XForm> matches the numbef of frames in the passed
  trajectory.  This results in a segmentation fault when the
  trajectory has a bad header (i.e. the number of frames listed does
  not reflect the number of frames actually in the trajectory).  This
  case is now checked for and a slightly more sensible error is
  thrown.
  <LI> The error messages given when the LOOS could not decide what
  format a file is in were vague...this has been improved...
</UL>

\section release132 Version 1.3.2 (1-20-2009)
\subsection r132_bugs Bug Fixes
<UL>
 <LI> Fixed <B>severe</B> bug that results in bad connectivity
 information when reading from Amber prmtop files.
</UL>

\subsection r132_added_changed Added or Altered Functionality and Notables
<UL>
 <LI> Added Atom::isBoundTo()
</UL>

\section release131 Version 1.3.1 (1-14-2009)
\subsection r131_bugs Bug Fixes
<UL>
 <LI>Fixed bug affecting MacOS X 10.5 builds.
 <LI>Aligner wrote out its reference PDB uncentered even if given the
 "--center" flag.
 <LI>Aligner did not correctly compute average structure unless the
 "--rmsd" flag was given.
 <LI>The "--terms" flag for the svd tool was inadvertently removed.
</UL>


\section release130 Version 1.3.0 (12-22-2008)

\subsection r130_namespace Namespace Changes
This release represents some major changes to the internal structure
of LOOS.  First and foremost, virtually all of LOOS is now
encapsulated within the "loos" namespace whereas before much of loos
was in the global namespace.  This means that <tt>Atom a;</tt>
becomes <tt>loos::Atom a;</tt>.  Alternatively, you can place a using
directive at the top of your code,
\code
using namespace loos;

Atom a;
\endcode

LOOS also now respects your global namespace by not forcing the
importation of names that it uses, such as from the \c std namespace
or \c boost.  In fact, in versions prior to 1.3.0, LOOS would import
\c std into the global namespace.  If you were relying on this
behavior, you will now need to manually import in your code.  We
therefore recommend that you add the following to the start of all of
your code:
\code
using namespace std;
using namespace loos;
\endcode

Another \b major change in version 1.3.0 is the matrix handling code.
There is now a generic \c loos::Math::Matrix class that supports several different
ways of laying out the raw data (i.e. row major vs column major) and
can even support sparse storage.  This class in in the \c loos::Math
namespace.  It is important to note that the goal of this class is to
provide a controllable wrapper around a block of memory for
interfacing with ATLAS.  It is not meant to be a generic matrix in a
mathematical sense, despite being located in the \c loos::Math
namespace.  The polymorphic matrix I/O classes (i.e. \c MatrixReader and
\c MatrixWriter) are now gone, replaced by template functions \c
loos::writeAsciiMatrix() and \c loos::readAsciiMatrix().  The format used is just
a block of ASCII data that can be read in my Octave/MATLAB and
GnuPlot.  These reading and writing functions are in the \c loos
namespace, not the \c loos::Math namespace.  The reason for this is to
support the following pattern,
\code
using namespace std;
using namespace loos;

typedef Math::Matrix<double, Math::Triangular> Matrix;
...
Matrix M;
writeAsciiMatrix(filename, M, "My matrix");
\endcode

Additionally, math functions that were at a global scope, such as \c angle() and \c
torsion() are now in the \c loos::Math namespace.

\subsection r130_added_changed Added or Altered Functionality and Notables

<UL>
 <LI> There is an issue with tr1::unordered_set in gcc-4.0.1.  This
 the internal data structure used by the sparse matrix policy.  To
 work around this, LOOS will switch to using the GNU provided hash_map
 if you're using gcc-4.0.1.  This is most likely to affect MacOS users
 running 10.4 and XCode 2.5 and earlier.
 <LI> When \c loos::createSystem() sees an Amber prmtop file, it will
 automatically look for a corresponding .inpcrd file and load the
 coordinates from that.  Otherwise, it returns an AtomicGroup sans
 coordinates.
 <LI> The ensemble functions (such as \c loos::averageStructure()) now
 take a \c loos::pTraj instead of a reference to a \c
 loos::Trajectory&.
 <LI> Many of the tools now use the boost program_options library
 <LI> The alignment tool (<tt>aligner</tt>) now writes out the average
 structure as well, and has an option to center the aligned
 trajectory.
 <LI> Added <tt>subsetter</tt> tool that pulls a subset of a model out
 of a trajectory into a new, smaller trajectory.
 <LI> The \c PDB reader now only emits warnings for each unique
 unknown record read rather than a whole mess of 'em...
</UL>

\subsection r130_bugs Bug Fixes
<UL>
 <LI> Fixed a bug in the Amber trajectory reader that caused LOOS to
 incorrectly seek frames.  This affected using readFrame(i) but not
 readFrame().
 <LI> \c AtomicGroup::splitByMolecule() now handles groups without
 connectivity.
 <LI> Fixed a problem with the PDB reading code that mangled wide
 CONECT records.
</UL>



<hr>

\section release121 Version 1.2.1 (11-3-2008)
\subsection r121_bugs Bug Fixes
<UL>
 <LI> Fixed bug in crossing-waters tool
 <LI> Fixed bug in \c loos::Atom::clearPropertyBit() that caused it to
 not always toggle the correct bit.
</UL>


<hr>


\section release120 Version 1.2.0 (10-24-2008)
\subsection r120_changes Changes
<UL>
 <LI>Added <tt>helix_kink</tt> tool to determine bend-angles in
 helices.
 <LI> Added \c HeavySolventSelector
 <LI> Updated tools to use new convenience/factory functions, also
 making them a tad more universal in what inputs they can take.
 <LI> Added \c AtomicGroup::clearBonds() to remove connectivity in a
 group.
 <LI> \c PDB will out write out CONECT records when there are 10K
 atoms or greater, to prevent field overflow.
 <LI> \c Coord<T> can now extract itself from a stream.
 <LI> Added \c loos::selectAtoms() to parse a selection string and
 apply it to an \c AtomicGroup.
 <LI> Added support for writing out \c PDB CONECT records.

</UL>

\subsection r120_bugs Bug Fixes
<UL>
 <LI> Fixed problem with \c PDB output when there are more than 10K
 residues
 <LI> Fixed bug in \c DCDWriter that caused the output periodic
 box to be set to (1,1,1) regardless of what was passed in.
 <LI> Fixed problem when writing a \c PDB with bonds to missing
 atoms.  Bonds are now dereferenced prior to writing.  This means that
 the \c PDB is now no longer const when written and could be sorted.
 <LI> Fixed bug in width of CONECT record fields
 <LI> Fixed bug in \c DCD trajectories affecting seeking frames
 <LI> Fixed bug in \c DCD trajectories potentially affecting the
 number of frames sensed in a trajectory that comes from NAMD.
 <LI> Fixed bug in \c Atom::checkProperty() that caused
 erroneous results.
</UL>


<hr>

\section release110 Version 1.1.0 (9-12-2008)
\subsection r110_changes Changes
<UL>
 <LI> Major reorganization of the \c Trajectory class using a template
 pattern.
 <LI> Added \c CCPDB class for concatenated PDBs that you can treat as
 a \c Trajectory
 <LI> Added \c PDBTraj class for handling non-contiguous PDB
 trajectories
 <LI> Added \c TinkerArc class for TinkerArc (concatenated XYZ files)
 trajectories
 <LI> Changed \c Atom defaults to initialize atomid and resid to 1
 rather than -1
 <LI> Added tool to compute the RMSD between a selection and its
 average structure over the course of a trajectory
 <LI> Improved self-tests
 <LI> Added a new tool to reimage a trajectory by molecule
 <LI> Added \c AtomicGroup::apply() to call a functor or a function
 pointer on each \c Atom in an \c AtomicGroup.
 <LI> \c DCDWriter now long requires you to specify how many frames
 will be written--you can append and it will automatically update the
 header correctly.
</UL>


\subsection r110_bugs Bug Fixes
<UL>
 <LI> Fixed problem with typedefs in MacOS 10.5
 <LI> Fixed bug in \c ATom where setting coords using a \c GCoord ref
 not correctly setting the coords-bit.
 <LI> Fixed big in <tt>aligner</tt> where the first frame of the DCD
 was not transformed.
 <LI> Fixed bug in \c AtomicGroup::splitByMolecule() where the \c
 PeriodicBox was not propagated beyond the first group split.
 <LI> Fixed bug in <tt>svdcolmap</tt> tool that affected certain
 instances of using atomid maps.
 <LI> Fixed bug in \c loos::iterativeAlignment() where the returned \c
 XForms were incorrect.  The passed ensemble of \c AtomicGroup objects
 were correctly transformed, but anything that used the \c XForms were
 affected by varying degrees.
</UL>

*/
