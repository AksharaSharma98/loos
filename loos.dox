/*!

\mainpage Lightweight Object-Oriented Structure library (LOOS)

Copyright &copy; 2008-2011, Tod D. Romo, Alan Grossfield\n
Department of Biochemistry and Biophysics\n
School of Medicine & Dentistry, University of Rochester\n


\image html gplv3.png

<hr>
Quick links:
      - \subpage building "Building LOOS"
      - \subpage tools "Tools included with LOOS"
      - \subpage citing "Citing LOOS in published work"
      - \subpage Changes

\section intro Introduction

Welcome to LOOS, a product of the Grossfield Lab at the University of
Rochester Medical School and the Department of Biochemistry and Biophysics.
Our goal in developing LOOS is to make it easier to analyze molecular
dynamics simulations.  LOOS is a code library for developing new analysis
applications, designed to simplify the common tasks (reading structure and
trajectory files, selecting atoms, computing geometric quantities) found in
almost every application.  Moreover, it is distributed with a 
number of useful standalone tools, ranging from simple things like radial
distribution functions and radii of gyration to principal component 
analysis to sophisticated methods for analyzing statistical errors.  

LOOS has several major features:
    - It transparently reads the native file formats for most major
      biomolecular simulation pacakges, including CHARMM, NAMD, gromacs,
      AMBER, and Tinker.
    - It uses an expressive syntax to allow selection of atoms using 
      all available metadata (e.g. atom number, residue name, etc).
      For more information see \subpage selections "Selection Language".
    - It allows novel analysis applications to be developed rapidly, with
      minimal programming skill required.  For example, atoms are referred
      to using reference-counted shared pointers, which retain the benefits
      of using pointers (e.g. rapid, lightweight copying) without requiring
      the developer to do manual memory management.
    - It should run on any unix-like environment, and is tested under
      multiple linux versions, Mac OSX, and cygwin.

For assistance using LOOS, to suggest a patch, to request a feature, or simply
to offer positive feedback, email LOOS-maintainer [AT] urmc.rochester.edu.  The
latest version of LOOS can be found at <A
HREF="http://loos.sourceforge.net">
http://loos.sourceforge.net</A>.

\section Applications

Although we primarily view LOOS as a development platform -- a tool for
making tools -- it is distributed with a number of prebuilt applications.
The included tools were developed in the course of research in the
Grossfield lab, but we believe them to be generally useful enough to merit
their inclusion.  The code for these programs is found in the Tools/
directories, and in various subdirectories (e.g. Tools/Convergence/).

For more information, see the 
    \subpage tools "Tools page"

In addition to providing valuable functionality (principal component
analysis, structure alignment, etc), these applications can also be useful
as templates for developing new applications using LOOS.  We have taken a
general design approach of developing relatively simple, single-purpose
tools, as we believe that makes it easier to quickly add functionality and
experiment with analysis methods, without the overhead of integrating with
a larger package.  Many (if not most) analysis involve the same sequence of
steps: read a description of the system (e.g. a PDB, PSF, parmtop, or gro
file), select which atoms will be examined, and then, for each frame in a
trajectory, compute some geometric quantity using the coodinates (e.g.
their centroid or moments of inertia).




\section Bugs
There are none...only features.  So don't worry about them!
Email us directly (LOOS-maintainer [AT] urmc.rochester.edu) if you find a bug^H^H^H unintended feature.

\section future Future Plans

<ul>
    <li> Python bindings for easier scripting support
    <li> More extensive manual, including developer's tutorial
    <li> More applications
</ul>

<hr>

\section license License


<I>LOOS (Lightweight Object-Oriented Structure library)</I>\n
Copyright &copy; 2008-2011, Tod D. Romo, Alan Grossfield\n
Department of Biochemistry and Biophysics\n
School of Medicine & Dentistry, University of Rochester\n

This package (LOOS) is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation under version 3 of the License.

This package is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

\image html grossfield_logo.jpg


*/


/*! \page citing "Citing LOOS in published work"
If you use LOOS in your work, please reference the following
publication:

Romo, T.D., Grossfield, A. "LOOS: An extensible platform for the
structural analysis of simulations."  31st Annual International
Conference of the IEEE EMBS (2009): 2332-2335

*/


/*! \page selections Selection Language

\section Language Description

The selection string parser is a relatively simpled parser patterned
after C/PERL expressions and includes support for PERL-style regular
expressions via Boost.  There are two kinds of literals supported:
strings and numbers.  Numbers are any valid integer.  Strings are
delimited by either single quotes or double quotes, so both of the
following are valid strings: 
\verbatim
"a string"
'another string'
\endverbatim

An important caveat to integer numbers is that LOOS assumes that none
will be negative.  In other words, no atomid nor resid nor number
extracted from a segid (see \ref magops_explained magical ops
below) will evaluate to a 
negative number.  The relational operators &lt; and &lt;= will behave
differently if either operand is a negative number.  In this case,
they will evaluate to false, for reasons that will become obvious when
you read about the magical operators below...

The parser also recognizes a small set of keywords that evaluate to
Atom properties.  These keywords fall into two types as well: those
that evaluate to a number (id, resid) and those that evaluate to a
string (name, resname, segname or segid).  Keep in mind that keywords
are not substitutions, but are more like a pre-defined function that
returns that atom property.  So you cannot put a keyword in a string
and expect it to be substituted with the appropriate value, for example.

\subsection relops Relational Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th> <th>Strings</th><th>Numbers</th><th>Example</th></tr>
<tr align="center"><td>&gt;</td><td>Greater than</td><td>yes</td><td>yes</td><td>resid &gt; 10</td></td>
<tr align="center"><td>&gt;=</td><td>Greater than or equals</td><td>yes</td><td>yes</td><td>resid &gt;= 10</td></td>
<tr align="center"><td>&lt;=</td><td>Less than or equals</td><td>yes</td><td>yes</td><td>resid &lt;= 50</td></td>
<tr align="center"><td>&lt;</td><td>Less than</td><td>yes</td><td>yes</td><td>resid &lt; 50</td></td>
<tr align="center"><td>==</td><td>Exactly equals</td><td>yes</td><td>yes</td><td>name == "CA"</td></td>
<tr align="center"><td>!=</td><td>Doesn't equals exactly</td><td>yes</td><td>yes</td><td>segname != "SOLV"</td></td>
<tr align="center"><td>=~</td><td>Regular expression match</td><td>yes</td><td>no</td><td>name =~ "^(C[A]?|N|O)$"</td></td>
</table>

\subsection logops Logical Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th><th>Example</th></tr>
<tr align="center"><td>&&</td><td>Logical And</td><td>name == "CA" && segid == "PROT"</td></tr>
<tr align="center"><td>||</td><td>Logical Or</td><td>segid == "SOLV" || segid == "BULK"</td></tr>
<tr align="center"><td>!</td><td>Not (Negate)</td><td>!(segid == "SOLV")</td></tr>
</table>


\subsection magops Magical Operators
<table align="center">
<tr align="center"><th>Operator</th><th>Operation</th><th>Example</th></tr>
<tr align="center"><td>-></td><td>Extracts a number from a string</td><td>segid -> "L(\d+)"</td></tr>
</table>


\subsection keywords Keywords
<table align="center">
<tr align="center"><th>Keyword</th><th>Atom Property</th><th>Evaluates to...</th><th>Operators</th></tr>
<tr align="center"><td>name</td><td>Atom name</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>id</td><td>Atom ID</td><td>number</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=</td></tr>
<tr align="center"><td>resname</td><td>Residue name</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>resid</td><td>Residue ID</td><td>number</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=</td></tr>
<tr align="center"><td>segid</td><td>Atom segid</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>segname</td><td>Synonym for segid</td><td>string</td><td>&gt;, &gt;=, &lt;=, &lt;, ==, !=, =~</td></tr>
<tr align="center"><td>all</td><td>Evaluates to true</td><td>number</td><td></td></tr>
<tr align="center"><td>hydrogen</td><td>Evaluates to true if atom is a hydrogen</td><td>number</td><td></td></tr>
</table>

Notes:\n
The \c all keyword is used to force a selection string to match all
atoms in instances where a selection is required.  For example, a
program to align frames of a trajectory DCD to a reference structure
might require a selection to pick which atoms to use when computing
the rotations and then another selection to pick which atoms are
actually rotated.  If you wanted to apply the rotation to all atoms,
you just use the \c all keyword, i.e.
\verbatim
aligner --selection='name='CA' && segid =~ "BAR[12]"' --transform='all' foo.pdb foo.dcd newfoo
\endverbatim


\subsection regexps Regular Expression Matching
The regular expression matching operator "=~" deserves special
attention.  It's use is more restrictive than the other operators in
that it can only take a keyword that evaluates to a string on the
left-hand side and a string on the right-hand side.  So, the following
expressions are valid:
\verbatim
name =~ "CA"
name =~ "^(C|O|N)$"
segid =~ "PROT|HEME"
\endverbatim
While the following are not valid:
\verbatim
resid =~ "10[0-9][0-9]"
segid =~ 0010
name =~ resname
\endverbatim

The regular expression syntax supported is the PERL syntax as
implemented by the Boost libraries.  While you can write regular
expressions that look a lot like globbing (a la VMD selections), keep
in mind that it isn't globbing.  It's a regular expression, which is
more powerful anyway...  You do need to be careful though that your
shell does not munge any of the regex operators.  It's a good idea to
use single quotes when you're writing regex's in a shell.

The string equality operators ("==" and "!=") both consider the
<I>entire</I> string.
\verbatim
"CA" == "C"  --> false
 "C" == "C"  --> true
\endverbatim
You can use the "=~" operator to perform a substring match.
\verbatim
"CA" == "C"  --> false
 "C" == "C"  --> true
"CA" =~ "C"  --> true
\endverbatim
This brings up an important point about using regular expressions: be
careful of unexpected substring matches.  For example, let's say you
are wanting to pick out all backbone atoms and you write this
selection string:
\verbatim
name =~ "C|CA|O|N"
\endverbatim
Now look what happens when the following atom names are matched:
\verbatim
 "CG" --> true
"CD1" --> true
 "NE" --> true
"OH2" --> true
\endverbatim
The problem is that the regular expression is not constrained, so even
though you explicitly put "CA" and "CB" in there, you also have a "C"
which says <I>any</I> atom name with a "C" in it is a match.  If
you want to match a string <I>exactly</I> with a regular expression,
you must anchor it:
\verbatim
name =~ "^(C|CA|CB|O|N)$"
\endverbatim

\subsection magops_explained Magical Operations
There is currently only one "magical operator" defined: "->".  This
operator takes a string keyword on the left-hand side (i.e. name,
resname, or segid/segname) and a string on the right-hand side
representing a regular expression pattern.  It will then try to
extract a numeric value (integer) from the subexpression matches.  For
example, suppose you have a range of segments that all follow a
pattern such as "PG1", "PG2", "PG3", ..., "PG120".  The regular
expression "PG(\d+)" matches these and the pattern within the
parenthesis is a subexpression.  So,
\verbatim
(segid->"L(\d+)") >= 10 && (segid->"L(\d+)") <= 50
\endverbatim
will match segid's "L10" through "L50".  Since each matched
subexpression will be examined for a valid integer conversion, the
following will work as expected:
\verbatim
segid->"(L|PG)(\d+)"
\endverbatim

There is a small hitch with the magical operator.  If there is no
match, it evaluates to -1.  But this is a valid int, so you cannot do
the following:
\verbatim
segid->"L(\d+)" <= 100
\endverbatim
since it will match all segids.  You can't, unless the &lt;= operator
is also a little bit special.  Fortunately, it is.  If either operand
is a negative number, both the &lt; and &lt;= operands assume that
this is a flag for a null-match, and will result in a false value
being returned.  It's a bit of a kludge, but it works...

<hr>
\section kahuna Putting It All Together...
When you perform a selection on an AtomicGroup using the selection
language, the expression is evaluated once for each atom in the
group.  If it evaluates to "true" (integer 1), then the atom is added
to the new selection.  Only one atom is considered at a time.

Here are some example selections:
\verbatim
Extract C-alphas:
  name == "CA"

Solvent:
  segid == "SOLV" || segid == "BULK"

Solvent heavy atoms (oxygens only)
  name =~ "O" && (segid == "SOLV" || segid == "BULK")

C-alphas from a range of residues:
  name == "CA" && resid >= 10 && resid <= 50
\endverbatim

\subsection Usage
Most tools based on LOOS will accept selection strings from the
command-line.  They must be enclosed in quotes though so they are all
one argument to the tool.  If you're using regular expressions, it's a
good idea to use single quotes to prevent your shell from
misinterpreting the regular expression operators and as mentioned
before, back-slash escapes may need doubling.

You can store your selection in a file if you want.  To use it then,
use the back-quote feature of your shell to "cat" your selection
file.  Since your selection must be one argument, you must enclose the
back-quote within double-quotes, i.e.
\verbatim
  a_tool_name "`cat myselection.txt`" arg arg arg
\endverbatim

If you store your selection in a file, then you can also use
comments.  A comment is anything after a "#" on a line.  Here's an
example of a selection in a file:
\verbatim
### Select water oxygens only...
# Pick out any atom that contains an oxygen
name =~ "O" &&
(segid == "SOLV" || # any segment named SOLV
segid == "BULK")    # or named BULK
\endverbatim


*/



/*! \page building Building LOOS
\section basicbuild Building Basics
LOOS requires <A href="http://www.scons.org" target="_blank">SCons</A> to build.  It also
requires the vecLib framework and Developer's Tools for OS X or <A
href="http://math-atlas.sourceforge.net" target="_blank">Atlas</A> for Linux.  It also
requires the <A href="http://boost.org" target="_blank">Boost</A> libraries for both
(including the regular expression library).  If you plan to modify the parser (you probably don't), you'll need the
GNU utilities <A href="http://www.gnu.org/software/flex/">flex</A> and
<A href="http://www.gnu.org/software/bison/">bison</A>.  Similarly, if
you want to rebuild the documentation, you'll need to install
Doxygen.  For information regarding building LOOS on a specific OS,
see \ref platform.

If your libraries are installed in non-standard locations, you may need to 
tell LOOS where its required components are.  To do this, do the following:
\verbatim
cp custom.py-proto custom.py
\endverbatim
Then edit your \c custom.py file to tell SCons and LOOS where your
libraries are.

\subsection compiling Compiling

You can temporarily override the defaults (and what's
set in your \c custom.py file by specifying the appropriate variables
on the command-line (run \c scons \c -h for more information)

To build just the library, cd to the top-level directory and run
SCons:
\verbatim
cd /path/to/LOOS
scons lib
\endverbatim

To build the library and tools as well, use:

\verbatim
scons
\endverbatim


To install LOOS, use the "install" target:

\verbatim
scons install
\endverbatim

This will cause SCons to copy the headers, tools, and library into
 /opt/loos.  You can change where LOOS is installed by changing the
 PREFIX variable in either your custom.py file or on the command
 line.  LOOS will create a /bin, /include, /lib, and /docs directory
 and copy the appropriate files.  The recommended installation
 methodology is to install LOOS into a version-specific directory, and
 then set up a symlink from \c loos-latest to the most recent
 installed version:
\verbatim
scons PREFIX=/opt/loos-1.5.5 install
ln -s /opt/loos-1.5.5 /opt/loos-latest
\endverbatim


\subsection general General Notes


There is some variability in the naming used for the Boost libraries.
If your build fails even though you just installed the latest Boost,
check the names of the regex and program_options libraries and set
these in your "custom.py" file.

If you're using a compiler in a non-standard location (e.g. you have
your own build of the latest and greatest gcc), SCons may not be using
it even though your $PATH is set correctly.  You can force which
compiler is used to build LOOS by setting the CXX variable in your
"custom.py" file.  You may also need to specify the "LIBXTRA" path...

SCons supports building LOOS in parallel.  If you have 4 cores, for
example, use "scons -j4" to use all 4 cores.

Prebuilt documentation for LOOS is provided as part of the
distribution.  This is simply copied into the install directory as
part of installation.  Should you want to build a new version of the
documentation, Doxygen is required.  Moreover, due to an issue we ran
into with SCons, documentation building and installation are
decoupled.  What this means is that you must explicitly build the docs
(i.e. "scons docs") and -then- install, "scons install".  Running
"scons install" will -not- rebuild the documentation, even if it out
of date (or nonexistent).


\subsection BYO Building Your Own Tools

To use LOOS to develop your own tools, you will want to include the top-level LOOS directory in
both your include path and your library paths, so something like the
following for linux
\verbatim
g++ -o mytool mytool.cpp -I/opt/loos/include -L/opt/loos/lib -lloos -lboost_regex -llapack -latlas
\endverbatim
or the following for OS X
\verbatim
g++ -framework vecLib -o mytool mytool.cpp -I/opt/loos/include -L/opt/loos/lib -lloos -lboost_regex
\endverbatim

Keep in mind that the above lines may be greatly oversimplified...
You will almost certainly need to change the names of the libraries to
reflect the versions you have installed, as well as the directories
for the header files.  This can get quite messy.  As such, we strongly
recommend you use either the \c SConstruct/SConscript or the \c
Makefile in the <I>Examples</I> directory as a template for building
your own tools.


<hr>

\section platform Platform Specific Notes

\subsection fedora Fedora

We recommend you use the the \c yum tool that comes with Fedora to
install the required packages.  You will need, at a minimum, to
install atlas, boost, and SCons.  Fedora splits many packages into the
libraries necessary to run and the libraries and headers necessary for
development.  You will need to be sure to install the development
versions as well.  These can be easily installed using "yum":

\verbatim
   yum install scons.noarch atlas.x86_64 atlas-devel.x86_64 lapack.x86_64 lapack-devel.x86_64
   yum install boost.x86_64 boost-devel.x86_64
\endverbatim



\subsection ubuntu Ubuntu

You will need to install SCons, lapack, atlas, and boost.  Using
aptitude (or your favorite tool), install the "libboost-dev" package
(or a specific version (i.e. libboost1.38-dev)), "libatlas-base-dev",
"libatlas-headers", "liblapack-dev", and "scons".  On some systems,
the names of the boost libraries vary.  In these cases, you will need
to use a custom configuration.  Copy "custom.py-proto" to "custom.py"
and edit it, uncommenting the lines marked for Ubuntu.
Alternatively, verify the names of the boost regex and program_options
libraries and set these appropriately in your "custom.py" file.

<em>The following additional installation tips come courtesy of Dow Hurst:</em>

To get the most currently available version of scons for Ubuntu Hardy 8.04 you have to add a
PPA repository.  Do this by getting the server key first, and then add the repository to the
/etc/apt/sources.list file.  The command and repository listing is below

\verbatim
sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B5140445

deb http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main 
deb-src http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main

apt-get update

apt-get install scons libboost-dev libboost-date-time-dev libboost-doc libboost-filesystem-dev libboost-graph-dev \
                libboost-iostreams-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev  \
                libatlas-base-dev libatlas-headers liblapack-dev
\endverbatim

Copy custom.py-proto to custom.py

Modify custom.py for the BOOSTREGEX and BOOSTPO variables so the lines look like this:

\verbatim
### This is the name of the boost-regex library
## Uncomment the following for Ubuntu
BOOSTREGEX='boost_regex-mt'


### This is the name of the boost-program-options Library
## Uncomment the following for Ubuntu
BOOSTPO='boost_program_options-mt'
\endverbatim

Then issue the following command using sudo:

\verbatim
sudo scons release=1 PREFIX=/opt/LOOS-1.5.4 install
\endverbatim

If you have root access then you can forget the sudo and issue the command without it.


\subsection openSUSE

There is no pre-built ATLAS package (that we could find) for
openSUSE.  LOOS will use the blas packages instead.  You will need to
install lapack, blas, boost, and SCons.  Using zypper (or your
favorite package manager), install the following:

\verbatim
zypper install scons boost-devel lapack blas
\endverbatim


\subsection osx MacOS X

First, make sure you have the Developer's Tools (i.e. XCode)
installed.  You can find it on your MacOS X install disk or,
alternatively, you can sign up for a free account with the Apple
Developer's Connection and download the latest version.  Next, you
will need to install SCons (http://scons.org) and Boost
(http://boost.org) by visiting their websites, downloading the
software, and following their installation instructions.  
You will also need to create a \c custom.py file to tell LOOS where to
find the libraries and headers that it needs.  Copy the \c
custom.py-proto to \c custom.py and edit it.  In particular, look at
the \c BOOSTREGEX and \c BOOSTPO variables for the boost regular
expression library and program options libraries.  You will most
likely need to change these names...

<hr>


\section Build Targets

There are several build targets available:

<table align="center">
<tr align="left"><th>Target</th><th>Description</th></tr>
<tr align="left"><td>(default)</td><td>Build the library and the tools</td></tr>
<tr align="left"><td>lib</td><td>Builds the library only</td></tr>
<tr align="left"><td>tests</td><td>Builds and runs the verification tests</td></tr>
<tr align="left"><td>docs</td><td>Uses Doxygen to generate new docs.</td></tr>
<tr align="left"><td>caboodle</td><td>Builds everything, including docs and tests</td></tr>
</table>

There are several different build options that are available for
LOOS.  These are handled on the command-line by SCons as "foo=1" to
turn the option on or "foo=0" to turn it off.  Most options default to
off.  Finally, you can query the available options by passing the "-h"
flag to SCons.  The following table lists the principal build options:

<table align="center">
<tr align="left"><th>Option</th><th>Default</th><th>Description</th></tr>
<tr align="left"><td>debug</td><td>0</td><td>Adds "-DDEBUG" to build</td></tr>
<tr align="left"><td>release</td><td>0</td><td>Turns on aggressive optimization (-O3)</td></tr>
<tr align="left"><td>regenerate</td><td>0</td><td>Regenerates the test verification data</td></tr>
<tr align="left"><td>reparse</td><td>0</td><td>Runs bison/flex to create the C++ files for parsing selections</td></tr>
</table>

\subsection Regeneration
The verification tests include sample output that is compared against
the current build.  If differences are found, they are flagged as
potential problems with the library.  If you update a test, change
systems (such as running on OS X as opposed to Linux), or perhaps
didn't get the test data from the SVN, then you will need to 
generate new test data and verify it manually.  To do so, use the
SCons command:
\verbatim
scons regenerate=1 tests
\endverbatim

\subsection Reparsing
To remove the dependency on Bison/Flex, the output from these tools
for the grammar and scanner are included.  If you want to rebuild
them, you will need to use the 'reparse=1' option.  The catch is that
if you have a different version of flex installed, there is a good
chance there will be a conflict with the bundled FlexLexer.h include
file.  If you see odd compiler errors, try removing that file and
rebuilding.  Alternatively, forcibly remove all generated files by
doing "rm *.cc *.hh" (assuming you've added no files with those
suffixes), then rebuild.

\subsection Distro Building a distribution
To build a distribution that doesn't require Doxygen and Bison/Flex,
the following is recommended:
\verbatim
scons regenerate=1 tests
scons docs
scons -c tests
\endverbatim

As a side-note, regenerating the verification data is potentially
hazardous if you have not been making sure your builds already pass,
so caveat bugger...

*/

/*! \page tools Summary of Tools

Below is a summary of the tools currently distributed with LOOS.  To get a
detailed summary of the command line arguments, run the program without
arguments or using "-h".  A growing number of tools also support the
"--fullhelp" options, which will display more detailed help
information including examples of how to use the tool.  All of the tools are now package agnostic, in the sense that they will take any of the file formats supported by LOOS as input.

At present, LOOS assumes that all periodic boxes are rectangular, and
will produce incorrect answers if trajectories using different box shapes
(eg truncated octahedron) are used in programs which make use of
periodicity (eg rdf).  We have no immediate plans to generalize the code to handle other periodicities, but are willing to reconsider if there is significant demand from users.


<HR>
<B><I> Categories of Tools </I> </B>
      - \subpage manipulation "Manipulating trajectory files"
      - \subpage Convergence "Assessing statistical errors and convergence"
      - \subpage hbond "Hydrogen Bonding"
      - \subpage PCA "Principal component analysis"
      - \subpage Membranes "Membrane systems"
      - \subpage enm "Elastic network models"
      - \subpage other "General purpose tools"

<DL>
  \page Convergence
  <DT> <B><I> Convergence Analysis Tools</I></B>
  <DD> A collection of tools for assessing statistical error and
  convergence, found in the Tools/Convergence/ directory:

    <DL>
      <DT> <B> assign_frames </B>
      <DD>  Given a trajectory and a set of fiducial structures (histogram
      centers), assign each frame in the trajectory to a histogram bin.
      Part of the workflow for computing the effective sample size.  (See
      effsize.pl)

      <DT> <B> avgconv </B>
      <DD> Computes the RMSD between the average structure for time i
      and i+1 for a trajectory.  The "locally optimal" flag determines
      whether the trajectory is globally aligned first or whether each
      block of frames used in the average is aligned prior to averaging.

      <DT> <B> bcom </B>
      <DD> Implements the block covariance overlap method.  Briefly,
      think of block-averaging where the trajectory is broken up into
      blocks of a given size, the PCA computed for the block, and then
      the covariance overlap is calculated between the block's PCA and
      the PCA for the entire trajectory.  Then this is repeated for
      increasing block sizes.  A Z-score for the bcom result can also
      be calculated (using the --zscore=1 flag and optionally setting
      the number of "tries" to use).

      <DT> <B>block_average</B>
      <DD> Reads a simple columnated text file, and computes the block-averaged
           standard error as a function of block size.  The plateau value
           is the best estimate for the true standard error.
           Reference: Flyvbjerg, H. & Petersen, H. G. 
           J. Chem. Phys., 1989, 91, 461-466

      <DT> <B> block_avgconv </B>
      <DD> Block-averaging of RMSD between average structures for a
      trajectory.  "Range" in this case is the range of block sizes
      and not stricly which frames of the trajectory to use.

      <DT> <B> bootstrap_overlap.pl </B>
      <DD> PERL program to compute the bcom and bootstrapped bcom for
      a trajectory, generating a plot of their ratio and an
      exponential fit.  Also generates a plot of the residual error in
      the fit.  Use the "--help" option for more details.  Note that
      the number of block sizes used is somewhat conservative, so it's
      probably a good idea to use a low number of block sizes
      initially to get a quick idea of how good or bad the sampling
      is, and then use the higher number of blocks for a more detailed
      analysis.  Also note that plotting requires gnuplot.  If you do
      not have gnuplot installed (or do not like gnuplot), use the
      "--noplot" flag to disable this.

      <DT> <B> boot_bcom </B>
      <DD> Bootstrapped bcom is similar to bcom above, but rather than
      using contiguous blocks, it uses a bootstrap procedure by
      randomly selecting frames from the trajectory to build
      decorrelated blocks.  If no seed for the random number generator
      is given, LOOS will pick a default (based on the current system
      clock).  The --replicates option determines how many blocks are
      generated for a given size.

      <DT> <B> decorr_time </B>
      <DD> Decorrelaton time as computed by structural histogram
      analysis.  The default values for the range of N-values,
      repetitions, and bin fraction are taken from the paper below and
      may need to be changed, particularly if you are using a
      trajectory you suspect is undersampled.
      Reference: Lyman & Zuckerman, J Phys Chem B (2007) 111:1287-82

      <DT> <B> effsize.pl </B>
      <DD> PERL front-end to the effective sample size tools (ufidpick,
      assign_frames, hierarchy, neff).  If you want to apply the
      Zuckerman-style effective sample size method (see the entry for neff,
      below), you probably should use this script instead of the individual
      tools, since this tool automates the process of picking fiducial
      structures (the frames that will be the centers of your histogram
      bins), assigning the frames from the trajectories to those bins,
      working out the mean first passage time between bins, and computing
      the effective sample size.  Reference: Lyman & Zuckerman, Biophys J 
      (2006) 91:164-72

      <DT> <B> fidpick </B>
      <DD> Picks fiducial structures for structural histograms.
      Reference: Lyman & Zuckerman, Biophys J (2006) 91:164-72

      <DT> <B> hierarchy </B>
      <DD>Given a trajectory whose structures have been binned into
      states via reference structures, computes the mean first passage time
      between states and then constructs a hierarchy of states based on
      exchange rates.  Used to generate input for neff.
        Based on Zhang, Bhatt, and Zuckerman; JCTC, DOI: 10.1021/ct1002384
	and code provided by the Zuckerman Lab
	(http://www.ccbb.pitt.edu/Faculty/zuckerman/software.html)


      <DT> <B> neff </B>
      <DD> Computes effective sample size given an assignment and
      state file (from hierarchy).
      Based on Zhang, Bhatt, and Zuckerman; JCTC, DOI: 10.1021/ct1002384
      and code provided by the Zuckerman Lab
      (http://www.ccbb.pitt.edu/Faculty/zuckerman/software.html)


      <DT> <B> sortfids </B>
      <DD>Sorts fiducials (from fidpick) based on a decreasing bin
      population.

      <DT> <B> ufidpick </B>
      <DD> Picks a set of fiducial structures from a trajectory using
      a uniform distribution.
      Reference: Lyman & Zuckerman, J Phys Chem B (2007) 111:12876-82
    </DL>

  \page enm 
  <DT> <B><I>Elastic Network Models</I></B>
  <DD> A collection of tools for working with ENMs, found in the
  Tools/ElasticNetworks/ directory:
    <DL>
      <DT> <B>anm</B>
      <DD> Computes the anisotropic network model for a structure.
      Reference: Atilgan, et al., Biophys. J. 80, 505-515, (2001).

      <DT> <B>gnm</B>
      <DD> Computes the gaussian network model for a structure. Reference:
      Bahar, et al, Folding and Design 2, 173-181, 1997.

      <DT> <B>vsa</B>
      <DD> Computes the vibrational subsystem analysis model for a
      structure. Reference: Woodcock, et al, J. Chem. Phys., 129, 214109-9,
      2008

      <DT> <B>psf-masses</B>
      <DD> Copies atom masses from a PSF into the occupancy field of a PDB

      <DT> <B>heavy-ca</B>
      <DD> Places the total mass for a residue into its CA (for a PDB with masses)

      <DT> <B>enmovie</B>
      <DD> Creates a DCD depicting motion along the axes taken from an ENM result

      <DT> <B>flucc2b</B>
      <DD> Computes B-values based on ENM (<I>now deprecated</I>)

      <DT> <B>eigenflucc</B>
      <DD> Computes the fluctuations from either ENM or PCA output.
      These can be mapped to B-values in a structure.

   </DL>

    \page hbond 
   <DT> <B><I>Hydrogen Bonding Tools</I></B>
   <DD> A set of tools for analyzing hydrogen bonding, found in
   Tools/HydrogenBonds/ directory:
      <DL>
        <DT><B>hbonds</B>
	    <DD> Finds putative h-bonds based on angle and distance

	    <DT><B>hmatrix</B>
	    <DD> Writes out a binary matrix indicating which atoms
	    have possible h-bonds at each time-point in a trajectory.

	    <DT><B>hcorrelation</B>
	    <DD> Computes the time-correlation function for h-bonds.
      </DL>
	    
    \page manipulation Trajectory manipulation
   <DT> <B><I> Trajectory manipulation tools </I></B>
   <DD> A set of tools for manipulating structure and trajectory
   files, found in the Tools/ directory:
       <DL>
       <DT> <B>aligner</B>
       <DD> Align structures in a trajectory against the average using an
       iterative refinement scheme.  Can read any LOOS trajectory format, but
       will write the aligned trajectory as a DCD.

       <DT><B>center-molecule</B>
       <DD>A more flexible tool for centering molecules.  Can use
       different subsets for calculating the center, controlling what is
       translated, and what goes to the output.  It can also reimage the
       molecule and center only within the x,y plane.

       <DT><B>center-pdb</B>
       <DD>Read in a structure file, shift its centroid to the origin, and 
       write a new pdb file to stdout.  

       <DT><B>clipper</B>
       <DD>Manually clip a model using arbitrary sets of clipping planes.  
       Outputs a PDB.

       <DT><B>concat-selection</B>
       <DD>Concatenates atoms from a trajectory into a single PDB.  Useful
       for seeing where something has been...
       
       <DT><B>convert2pdb</B>
       <DD>Read in a structure file in a LOOS-supported format, and write it 
       out as a pdb file.

       <DT><B>dcdinfo</B>
       <DD>Extract the header information from a CHARMM/NAMD dcd file.  Will
       verify the number of frames present and report periodic box
       information.

       <DT><B>dumpmol</B>
       <DD>Outputs the low-level AtomicGroup representation for a model.
       Useful for double-checking LOOS' parsing of a file.

       <DT><B>frame2pdb</B>
       <DD>Extract a frame from a trajectory and write it as a pdb file.

       <DT><B>merge-traj</B>
       <DD> Merges a series of trajectory files into a single DCD file.  If you
       give it a pre-existing merged file to work from, it simply appends the
       new data to it by counting frames in the merged DCD and skipping that
       many frames in the input; this enormously reduces the time needed to
       merge large data sets.  It also has options to produce a second
       down-sampled trajectory, to translate and reimage each frame such that a
       particular set of atoms is centered at the origin, and to fix imaging
       such that molecules aren't broken across the periodic image.  

       <DT><B>model-select</B>
       <DD>Takes a model (PDB, PSF, etc) and a selection string.  Parses the 
       selection, then applies it to the PDB and writes the output to stdout.  
       This tool is used mainly for checking your selection strings to make 
       sure you're actually selecting what you intend to select.

       <DT><B>model2matlab</B>
       <DD>Takes a PDB and a selection and an optional selection and writes out
       the coordinates to stdout in matlab format.

       <DT><B>porcupine</B>
       <DD>Creates a faux-PDB containing atoms/bonds that represent a 
       "porcupine" figure for a column vector from a matrix.  This can be used 
       to visualize the direction of motion from SVD and ENM results.

       <DT><B>rebond</B>
       <DD>Distance-based search for bonds, that are explicitly added to
       the output PDB.  Use this tool to visualize your ENM networks, or
       to reconnect CA traces from SVD results...

       <DT><B>recenter-trj</B>
       <DD>Loop over a trajectory, translating the entire system such that
       the selected portion remains at the origin, and reimaging the rest
       on a molecule by molecule basis.  It can also just do translations
       in the z-dimension, or just in the xy-plane (these options are
       useful for membrane systems).  The model file must have connectivity
       information, and the trajectory must have periodic box information.
       This program writes a DCD file as output.

       <DT><B>reimage-by-molecule</B>
       <DD>Reads a trajectory, and writes a new DCD which has been reimaged
       on a molecule by molecule basis.  The model file must have
       connectivity information, and the trajectory must have periodic box
       information.

       <DT><B>renum-pdb</B>
       <DD>Used primarily to renumber atoms/residues in a PDB...but it can
       work with any LOOS-supported format.

       <DT><B>rmsfit</B>
       <DD>Superimpose two structures using Kabsch RMS alignment.

       <DT><B>subsetter</B>
       <DD>Subsets a trajectory (stripping out any atoms that don't match the
       given selection), and writes a new DCD file.  Can be used to
       concatenate trajectories, pull specific frames out, as well as
       adjusting periodic box information and centering the trajectory on a
       selection.  Since trajectories are often stored in files with an
       ascending numerical sequence name (i.e. frame_1.dcd, frame_2.dcd,
       etc), and since the shell globbing doesn't sort these in numerical
       order, a command such as
    <PRE>subsetter foo model.pdb frame_*.dcd</PRE>
       will not concatenate your frames in the order you want.  You can tell
       subsetter to sort the input trajectories so that they are in numerical
       order by using the "--sort" flag.  For more detailed information, use
       the "--fullhelp" option with subsetter.

       <DT><B>traj2dcd</B>
       <DD>Converts a LOOS-supported format to a DCD.

       <DT><B>trajinfo</B>
       <DD>Similar to dcdinfo, but works with generic trajectories.  Can report
       box information and the centroid of a selection.  Useful for verifying
       trajectory header information and extracting the number of frames and
       atoms in a trajectory.
       </DL>
        

   \page Membranes "Membrane systems"
   <DT> <B><I> Tools for membrane systems</I></B>
   <DD> Tools specifically intended for analyzing lipid bilayers and
   related systems, found in the Tools/
   directory:
       <DL>

       <DT><B>crossing-waters</B>
       <DD>Loop over a trajectory and compute the number waters crossing a 
       membrane.

       <DT><B>density-dist</B>
       <DD>Compute the charge/electron/mass density distribution for the system
       along the z-axis. Produces the distribution for the whole system and an
       arbitrary number of selections.  Requires a structure file format which
       supplies mass and/or charge.  The newest version also has an option to
       symmetrize the density distribution in z.  This assumes that the input
       trajectory has already been set up with the membrane center at z=0.  You
       can accomplish this using merge-traj, which can optionally recenter a
       selection at every frame.  The functionality from density-dist-windowed
       has also been folded in, using the --window option.

       <DT><B>density-dist-windowed</B>
       <DD>Compute the charge/electron/mass density distribution for the
       system along the z-axis for blocks of time within a trajectory,
       producing a density distribution time series.  This is deprecated,
       since the functionality has been merged into density-dist.

       <DT><B>order_params</B>
       <DD>Compute the deuterium quadrupolar splitting order parameters for
       lipid molecules.  The model file must have connectivity information.
       The current version supports both 3 residues/lipid and 1
       residue/lipid topology files, and can optionally compute order
       parameters relative to the x and y axes.  In addition, a more
       careful estimate of statistical uncertainties is available using
       block averaging.  

       If you wish to use block averaging to estimate the errors, we suggest
       running the tool twice: the first time will give you the block standard
       error as a function of block size, and you can read out the true
       standard error as the plateau value at large block size.  Because the
       plateau region is often noisy (since the number of blocks is getting
       small), the code offers you the ability to estimate the plateau value by
       averaging over a range of numbers of blocks.  This defaults to using the
       estimates from 2 blocks through 5 blocks, but you should check the plots
       yourself to make sure this is appropriate for your data set.  For more
       on block averaging, see the review by Grossfield and Zuckerman,
       "Quantifying uncertainty and sampling quality in biomolecular
       simulations", Annual Reports in Computational Chemistry, 2009, 5, 23-48.

       <DT><B>xy_rdf</B>
       <DD>Compute a two dimension radial distribution function in the xy plane,
       splitting the system into upper and lower leaflets.  Primarily intended 
       for analyzing lateral organization of lipid-water interfaces.  Note
       that as of version 1.6.0, the command line arguments have changed
       significantly. The new version allows you control how your selection
       is split up, by residue, segment ID, or molecule (if your system
       file has connectivity).

       <DT><B>xy_rdf_timeseries</B>
       <DD>Same as xy_rdf, except producing a series of block averages rather 
       than averaging over the whole trajectory.  This program is
       deprecated, because its functionality has been merged into xy_rdf.

       </DL>

    \page PCA
   <DT> <B><I> Principal component analysis </I> </B>
   <DD> Tools for performing PCA, found in Tools/.  Note: some related
   tools are also found in the network models section (\subpage enm).

       <DL>
       <DT><B>coverlap</B>
       <DD>Compute the covariance and subspace overlaps between either ENM
       results or PCA results (or any combination).  The covariance overlap
       was defined in  Hess, Phys. Rev. E, 65, 031910, 2002

       <DT><B>big-svd</B>
       <DD>Computes the SVD/PCA for a trajectory.  This differs from the
       svd below in that it uses single precision math and it computes
       fewer right singular vectors (e.g. if your structure has N atoms
       and you have T timestemps in the trajectory, then the RSV matrix
       will be T x 3N as opposed to T x T in the svd tool).  See also svd.

       <DT><B>svd</B>
       <DD>Performs principal component analysis for a trajectory using
       singular value decomposition, writing out the eigenvalues, left
       singular vectors (eigenvectors) and the right singular vectors
       (projection timeseries) as OCTAVE-formatted text files.

       <DT><B>svdcolmap</B>
       <DD>Map the magnitude of a left singular vector onto a PDB file's B-value
       column.  Useful for visualizing which portions of a molecule are mobile 
       for a given SVD mode.
       </DL>


    \page other
   <DT> <B><I> General purpose tools</I> </B>
   <DD> 

       <DL>

       <DT><B>averager</B>
       <DD>Compute the average structure for a set of molecules from a 
       trajectory, using an iterative scheme.

       <DT> <B>atomic-rdf</B>
       <DD>Compute the radial distribution function for 2 selections of
       atoms taken from a trajectory, treating each selection as a set of
       individual atoms.  For contrast, see rdf.

       <DT><B>blurrogram.pl</B>
       <DD>A PERL tool for creating "blurrogram" style figures with Pymol.

       <DT><B>bounding</B>
       <DD>Write out the bounding box for a selection of atoms from a 
       structure file.
       
       <DT><B>contact-time</B>
       <DD>This tool computes the number of contacts between a probe
       selection and a set of target selections.  The output is in the
       form of a matrix and can be normalized by either total number of
       contacts (across the row) or by the maximum # of contacts per
       target (down the column).  In addition, it can automatically split
       the probe into separate molecules, based on their segids, and
       compute the inter-probe contacts as well.

       <DT><B>contacts</B>
       <DD>Loop over a trajectory and count the number of contacts between two
       sets of atoms.  

       <DT><B>drifter</B>
       <DD>Calculates movement centroids over a trajectory

       <DT><B>exposure</B>
       <DD>Computes the degree of exposure of a set of selections over
       time.  The exposure is defined as the average density of a probe
       selection within a spherical shell about each target atom.  This
       tool can be used to determine how exposed to solvent a selection
       is, or alternatively how buried a selection is.

       <DT><B>helix_kink</B>
       <DD>Given two selections and a trajectory, compute the time series
       of the angle between their principal components.  Also useful for
       measuring domain hinge motions.

       <DT><B>interdist</B>
       <DD>Calculates distances between a selection and an aribtrary set of 
       other selections over a trajectory.  The distance computed can be the
       distance between the centroids, the minimum distance between any atom
       in any group, or the max distance between any atom in any group.

       <DT><B>octavex</B>
       <DD>Extract embedded OCTAVE data from a LOOS output/log.  This is
       used with aligner.

       <DT><B>paxes</B>
       <DD>Computes the magnitude of the principal axes of a set of selections
       over the trajectory.  This can be used to analyze shape changes over
       time.

       <DT><B>ramachandran</B>
       <DD>Computes a ramachandran map for a given selection of a specified
       range of frames in a trajectory (or all frames).  Note that some
       torsions may be missing for the residues at the ends of the
       selection.  To avoid this, expand your selection by a residue in
       both directions, then use the "--skip" flag.

       <DT><B>rdf</B>

       <DD>Computes the radial distribution function for two selections
       averagd over a trajectory.  The selections are split up by molecule
       and the center of mass is used.  For example, selecting all water
       molecules will cause it to compute the radial distribution of the
       centers of mass of individual water molecules.  For contrast, see
       atomic-rdf.

       <DT><B>rgyr</B>
       <DD>Compute the radius of gyration for a selection of atoms.
       Optionally, it can break your selection into individual molecules,
       if for example you have multiple solutes in the system.

       <DT><B>rmsd2ref</B>
       <DD>Computes rmsds between a selection and either its average
       conformation or a reference model, optionally aligning the
       selection.

       <DT><B>rmsds</B>
       <DD>Loops over a trajectory and computes the pairwise RMSDs for a 
       selection of atoms.

       <DT><B>rotamer</B>
       <DD>Computes the chi-1 and chi-2 angles for a given selection over an
       entire trajectory.

       <DT><B>torsion</B>
       <DD>Given 4 selections, compute the torsion angle for their centroids.  
       This program loops over a trajectory and writes the torsion angle time 
       series.
    </DL>

*/



/*! \page Changes Change Log
\section release160 Version 1.6.0 (3-4-2011)
\subsection f160_bugs Bug Fixes

<UL>
  <LI> Fixed bug affecting Trajectory::rewind() for Tinker ARC files
  <LI> Fixed bug when computing variance in TimeSeries
  <LI> Re-fixed bug in svd tool for MacOS (precision issue with
  vecLib)
  <LI> Fixed compiler issue in AtomicGroup for older versions of g++
  <LI> Fixed bug in AtomicGroup::renumberWithBonds()
  <LI> Fixed bug in big-svd where RSVs were not normalized
  
</UL>
\subsection r160_add_changed Added, Changed, or Otherwise Notable
<UL>
  <LI> Substantial change in ENM code to turn it into a library in its
  own right.  More information can be found within the Doxygen docs
  (in ENM namespace)
  <LI> AtomicGroup::findById() no longer implicitly sorts atoms.  If
  the AtomicGroup has been explicitly sorted, then the binary search
  will still be used to find the atom.  Otherwise, a linear search is
  used.
  <LI> Order parameters now uses boost program options (command
	line is similar, but not precisely backward compatible), has the option to
	use y or x as the direction of the magnetic field, and has the option to
	dump out the timeseries of the order parameters.  Specifically, the last
	quantity is computes the average instantaneous order parameter for each
	carbon position at each time point.  The "+/-" column in the output is the
	stdev of these timeseries, which is _not_ a good measure of the
	statistical uncertainty.  To get that, one should use block averaging on
	the time series.  This is also an option -- in principle, you read off the
	plateau value from the block averaging plot, but since this plateau is
	noisy, I make you specify a range of block sizes over which to average
	(the defaults are 2 blocks to 5 blocks, but you really should run the
	program twice, and the first time look at the block averaging plots to see
	where the block standard error converges.
  <LI> Added a simple Nelder-Meade Simplex optimizer
  <LI> Changed averager so that bonds are pruned (rather than cleared)
  when subsetting.
  <LI> Improved phase-pdb tool.  See "--help" for more details
  <LI> Added kurskew tool to compute moments for RSVs (useful for
  quick and dirty checks for modality)
  <LI> Added block averaging tool
  <LI> The aligner tool can now align to a reference structure and
    deprecated options removed
  <LI> Added a suite of convergence tools (see Doxygen docs for more
  details)
  <LI> covarianceOverlap() now uses BLAS and matrix operations so it
  is significantly faster.
  <LI> Added z-score for covariance overlap and support for this in
  the coverlap tool.
  <LI> Changed rdf tool to split by molecule, residue, or segment.
  <LI> AtomicGroup::splitByMolecule() has been improved and should be
  20-30x faster.
  <LI> density-dist can now make the density symmetric about the
  membrane center (assuming the system has been centered such that the
  membrane center is at z=0).
  <LI> Many more tools now use boost::program_options
  <LI> density-dist-windowed is now deprecated, having been folded
  into density-dist
  <LI> recenter-trj should be more robust (although slower)
  <LI> Added option to merge-traj to "fix by molecule" so that
  trajectories that have molecules broken across the periodic boundary
  (eg gromacs output) come out looking clean.
</UL>

\section release155 Version 1.5.5 (8-2-2010)
\subsection r155_add_changed Added, Changed, or Otherwise Notable
<UL>
  <LI> Added a tool to randomly perturb structures
  <LI> Added a tool for computing fluctuations from ENM/PCA (the old
  flucc2b tool is now deprecated)
  <LI> Added a tool for computing SVD's of large systems or when there
  are many time-steps
  <LI> Added a tool to compute the covariance and subspace overlaps
  from ENM and PCA results
  <LI> Added a new suite of tools for analyzing hydrogen-bonding
  <LI> Added support for accessing the SharedPeriodicBox in
  AtomicGroup
  <LI> Added support for some STL algorithms in TimeSeries class
  <LI> Changed the order_params tool to handle both 1- and 3-residue
  per lipid formats
  <LI> Changed the regular SVD tool to use double-precision
  <LI> The transpose flag in ASCII matrices is now deprecated
</UL>

\subsection r155_bugs Bug Fixes
<UL>
  <LI> Fixed bug in linux that affected library link order.  ATLAS is
  now correctly linked in first.
  <LI> Fixed bug in AtomicGroup::perturbCoords() where the directions
  picked were not actually uniformly distributed on the sphere.
  <LI> Fixed bug in writing internally transposed matrices.
  <LI> Fixed bug in Matrix code that affected large matrices (those
  with more than 2^32 elements).
  <LI> Fixed bug in svd tool only for MacOS.  This bug is one in the
  vecLib framework and may or may not effect the SVD output for single
  precision.  Symptoms include non-orthogonal LSVs and all non-zero
  singular values (there should be 6-zeros if using an aligned
  trajectory).  The double-precision svd does not have this problem
  nor does the implementation in big-svd.
  <LI> Fixed big in traj2matlab where the wrong subset of atoms was
  used to create the matrix.


\section release154 Version 1.5.4 (4-23-2010)
\subsection r154_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Changed contact-time to use "fast" method that uses a
  distance-cutoff to restrict which target atoms are considered.  This
  can be disabled if necessary.  See "contact-time --help" for more
  details.
  <LI> Fixed bug in DescendingSort that caused it to sort ascending
  instead.
  <LI> Changed porcupine tool to make tagging of altered atoms
  optional and to have fixed length tips rather than proportional
  length ones.
  <LI> Changed AtomicGroup::rmsd() to take a const arg (this means
  that it no longer implicitly sorts the AtomicGroup objects).
  Implicit sorting is one "feature" that is going to gradually go away
  from AtomicGroup.
  <LI> Changed VSA/ANM tools so as to allow user-defined HCA
  parameters
  <LI> Fixed Hessian code (affecting ANM/VSA) to truncate negative
  spring constants to 0 (generally, this happens when using HCA with
  nodes that are too close together).
  <LI> Fixed bug in parser for Debian systems
  <LI> Changed Linux code to use blas rather than cblas
  <LI> Changes made to SConstruct for better Ubuntu/SUSE support
</UL>


\section release153 Version 1.5.3 (2-19-2010)
\subsection r153_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> PDB::fromAtomicGroup() now generates a UnitCell if the
       passed AtomicGroup has periodic boundary information.  This
       means that the output PDB will have a CRYST1 record.
  <LI> Added a more flexible centering tool called center-molecule
  <LI> Added a new tool for computing inter-selection contacts
       over time called contact-time
  <LI> Changed exposure tool to default to reimaging
  <LI> Added alignto tool for aligning a trajectory to a reference
  structure
  <LI> Added a set of generic sorting functions
  <LI> Added support for single and double precision matrix
  operations.  Note that these are for "quick-and-dirty" work and are
  not meant to give good performance...
  <LI> ENM tools sort their output from smallest to largest
  eigenvalue, and the zero eigenpairs always come first
  <LI> Added a VSA tool (along with psf-masses and heavy-ca tools for
  getting mass information into the VSA tool)
  <LI> Added covariance and subspace overlap functions
  <LI> Changed DCDWriter so that it can now append to an existing DCD
  <LI> Changed ENM tools use a Hessian constructor that's in a
  separate module, along with different methods for handling the
  spring constants via a polymorphic "superblock" object pointer...
  This will make more sense looking at the code itself...
</UL>

\subsection r153_bugs Bug Fixes
<UL>
  <LI> Fixed bugs in subsetter affecting reimaging only occuring if
  centering was turned on, and one causing bonds not to be cleared
  when subsetting.
  <LI> Fixed bug in extractCoords() causing it to always fail.
  <LI> Fixed bug in enmovie tool affecting connectivity not being
  cleared and atom number mismatches between the reference PDB and the
  DCD.
  <LI> Fixed bug in svd function that takes a vector<AtomicGroup>, but
  only when aligning was requested.  The alignment transform was
  doubly-applied to the passed vector.  No tools were affected by
  this.  No other invocations of svd() were affected either.
  <LI> Fixed bug in aligner where the target selection was not always
  correctly centered.  It would be aligned correctly, just not always
  centered...

\section release152 Version 1.5.2 (10-9-2009)
\subsection r152_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Changed AtomicGroup::principalAxes() so that it scales the
  eigenvalues by the number of atoms.
</UL>

\subsection r152_bugs Bug Fixes
<UL>
  <LI> Fixed bug where segname was not correctly handled as a synonym
  for segid.
  <LI> Fixed bug affecting Amber restart files.  These are handled as
  a special trajectory with one frame, but the readFrame() iterator
  was not correctly set so the first call would return a false,
  indicating that all frames had been read.
  <LI> Fixed another issue with Amber restart files that may have
  slight variations in formatting.  This affected restart files that
  only have the number of atoms in the header rather than the number
  of atoms and the time.
</UL>

\section release151 Version 1.5.1 (9-21-2009)
\subsection r151_bugs Bug Fixes
<UL>
  <LI> Fixed bug in install target where trr.hpp was not copied to the
  installation directory.
</UL>

\section release150 Version 1.5.0 (9-17-2009)
Many of the changes in this version are internal (primarily as new
functions and features).  The big change is that LOOS now supports
Gromacs .gro, .trr, and .xtc file formats.  Since Gromacs stores
coordinates in nm, LOOS converts the coordinates into Angstroms upon reading.
LOOS only supports single precision .xtc files.

<em>Important note regarding Gromacs support:  While we have tested
the gromacs support with a limited set of sample files, the code has
not been as rigorously tested as support for previous formats have
been.  Gromacs support should therefore be considered experimental at
this stage.  Please report any problems or errors to as at
loos_maintainer [at] urmc.rochester.edu</em>

LOOS now also uses the hybrid-36 encoding method for PDB files with a
large number of atoms or residues.  See <A
href="http://cci.lbl.gov/hybrid_36">here</A> for more information.

\subsection r150_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Added AtomicGroup::findBonds() to perform a simple
  distance-search for bonds.
  <LI> Added support for testing Atom equality.  See loos::AtomEquals,
  loos::AtomCoordsEquals for more information.
  <LI> Added loos::AtomicGroup::contains() and loos::AtomicGroup::intersect() for
  set operations.
  <LI> Added new bits to loos::Atom that can be used as flags (i.e. flagbit,
  usr1bit, ...)
  <LI> Added Gromacs classes: loos::Gromacs, loos::TRR, and loos::XTC.
  <LI> Changes to the Trajectory class and subclasses:
  <UL>
	<LI> Changed the underlying stream type to iostream.  This
	should not break anything unless you have subclassed
	Trajectory for your own purposes.
	<LI> Implementation functions are now private.
	<LI> Added some missing constructors in the subclasses.
  </UL>
  <LI> Added some utilities for parsing strings
  (loos::parseStringAs<>())
  <LI> Added new formatters for matrix output that make it easier to
  set the width and precision of the matrix elements, or write them
  out in scientific notation (i.e. loos::ScientificMatrixFormatter)
  <LI> Added Hybrid-36 support to PDB's (both reading and writing)
  <LI> rmsds can now work with a subset of frames from a trajectory
  <LI> subsetter can now reimage
  <LI> SVD now will only write out the non-zero terms of the SVD
  rather than the entire matrix.
  <LI> Added a "not" operator to the selection language so there's no
  more fighting with the shell over '!'.
  <LI> Some tools have been updated internally to be more
  consistent with the current LOOS idioms...  There may be minor
  changes in usage:
  <UL>
	<LI> SVD now requires a 1 or 0 for the -S option
  </UL>
  <LI> New tools:
  <DL>
	<DT> molshape
	<DD> Reports statistics about a selection (i.e. extents,
	radius of gyration, location of centroid, principal axes, etc)

	<DT> native_contacts
	<DD> Compute the fraction of native contacts in a trajectory
	based on an initial structure
  </DL>
</UL>

\subsection r150_bugs Bug Fixes
<UL>
  <LI> Fixed bug in loos::writeAsciiMatrix() when only writing a subset of a
  matrix.
  <LI> Fixed bug in bounding tool's box size
  <LI> Fixed problem with spurious rebuilds of all of LOOS with
  SCons.
  <LI> Fixed bug in loos::DCD::updateGroupCoords where the upper-bounds
  check on atomid's was incorrect.
</UL>


\section release140 Version 1.4.0 (6-26-2009)
There has been a change in philosophy of how LOOS handles system
descriptions vs models/trajectories/coordinates.  Previously, LOOS
would try to create an AtomicGroup that had complete information, such
as when given an Amber prmtop file.  In this case, LOOS would go
looking for a file with the same name ending in ".inpcrd" and load
this in with the prmtop file.  Now, LOOS will treat coordinate files
as a special trajectory that has only one frame.  This way, most tools
that can operate over a trajectory can also operate on a single model,
and vice versa.  For example, the following are all valid:
\verbatim
ramachandran --pseuo foo.prmtop foo.rst all
ramachandran --pseudo foo.prmtop foo.mdcrd all
ramachandran foo.psf foo.dcd all
ramachandran foo.psf foo.pdb all
ramachandran foo.pdb foo.pdb all
\endverbatim

This can lead to the somewhat awkward usage in the last example, but
think of it as the first PDB provides the system description and the
second provides the actual model, even though they're both the same.

\subsection r140_added_changed Added, Changed, or otherwise Notable
<UL>
  <LI> Added an AtomNameSelector() to match arbitraty atoms
  <LI> Added centerOfElectrons() to AtomicGroup class
  <LI> Added support for Tinker file formats in the factory functions
  <LI> Added a renum-pdb tool for renumbering models
  <LI> Added interdist tool for calculating distances between selections
  <LI> Added support for numerically sorting the input trajectory
  filenames in subsetter.  See the tool documentation above for more
  information.
  <LI> Added a porcupine tool for creating porcupine plots for SVD/ENM
  results
  <LI> Added paxes tool for computing the principal axes magnitudes
  (i.e. eigenvalues) of a set of selections over a trajectory.
  <LI> Added drifter tool for tracking centroid movement
  <LI> Added a ramachandran tool for calculating ramachandran maps
  <LI> Added a "rotamer" tool for calculating the chi-1, chi-2 torsion
angles for side-chains.
  <LI> Added "rmsfit" tool to superimpose one model upon another
  <LI> Added a suite of Elastic Network Modeling tools inside Tools:
  <UL>
     <LI> "anm" calculates an anistropic network model
     <LI> "gnm" calculaes a gaussian network model
     <LI> "flucc2b" maps anm/gnm fluctuations onto a PDB's B-values
     <LI> "enmovie" creates a DCD trajectory showing motion based on
anm/gnm results.
  </UL>
  <LI> Reduced the size of the test files
  <LI> Added an install target for SCons
  <LI> Added support for building a shared-library version of LOOS
  <LI> Added a special SCons check for ubuntu.  Some systems appear to
  have an issue where they require the gfortran lib to be explicitly
  linked.  If this causes an issue for you, simply comment out the
  ubuntu check in the SConstruct.
</UL>

\subsection r140_internal Internal Changes
<UL>
  <LI> Changed how Trajectory classes work slightly...
  Trajectory-derived classes must now read in and cache the first
  frame of the trajectory as part of their initialization.
  <LI> CAlphaSelector() is now deprecated; use AtomNameSelector("CA")
  instead.
  <LI> Added a set of classes for providing user-feedback when a tool
  may take some time to execute.  See loos::ProgressCounter for more
  information, and the rmsds tool for an example of how to use the new
  classes.
  <LI> Removed the use of BOOST_FOREACH.  This solves a compatability
  issue with older versions of BOOST and LOOS.
  <LI> Added a number of support utilities for reading in whole
  trajectories and reading in specific frames.
  <LI> The ensemble functions (i.e. align and average) can now operate
  over a user-specified set of frames from a trajectory.
  <LI> Added AtomicGroup::splitByResidue() that splits up a group by
  residue (based on changes in resid and/or segid), returning a
  vector<AtomicGroup>.
  <LI> The createSystem factory function now no longer tries to
  automatically find and import an Amber coord file when reading in a
  PRMTOP.  In addition, the Amber::readCoords() function has been
  removed.
  <LI> Added support for Amber restart and coord files as a special
  1-frame trajectory.  This is transparently handled by the
  createTrajectory factory function.
  <LI> The Trajectory class now uses NVI for the seek and rewind
  member functions so it can impose some pre-conditions.  This means
  the Trajectory base class handles the cached_first flag.  Unless
  you're writing your own trajectory class, this wont affect you.  If
  you are, it means the seek and rewind functions are now handled by
  rewindImpl(), seekImpl(), etc.

</UL>

\subsection r140_bugs Bug Fixes
<UL>
  <LI> Fixed bug in subsetter where verbose output was always on.
  <LI> Fixed bug in subsetter where out of range frame indices would
  cause a seg-fault.
  <LI> Fixed bug in rmsds that caused the average rmsd to be
  calculated incorrectly.
  <LI> Fixed some issues with the SConstruct file
  <LI> Fixed a problem with averager where it was caching all frames
  of the trajectory causing swapping for large trajectories
</UL>


\section release134 Version 1.3.4 (2-16-2009)
\subsection r134_bugs Bug Fixes
<UL>
  <LI> Fixed bug in aligner affecting centering the trajectory while
using different alignment and transformation subsets.  The output
trajectory was incorrectly transformed.  The error committed is
proportional to the difference in the centroids between the two
subsets...
</UL>



\section release133 Version 1.3.3 (2-9-2009)
\subsection r133_added_changed Added, Changed, or Notables
<UL>
  <LI> Added recenter-trj tool to center trajectories
  <LI> Added trajinfo tool to print out information about generic
  trajectories.  This tool will also verify the number of frames
  actually present in the trajectory.
  <LI> Added concat-selection tool to concatenate atoms from a
  trajectory into a single PDB.  This is useful for visualization atom
  distributions over the entire trajectory
  <LI> Added blurrogram.pl, a PERL script to aid in creating
  "blurrogram" figures using Pymol
  <LI> Added AtomicGroup::translate()
  <LI> The frame2pdb tool now accepts a selection (subset) to write
  out
  <LI> The svd tool always writes out an average structure now
  <LI> The subsetter tool can now accept a list of aribtrary ranges of
  frames to extract, or a stride option.  It can also take an
  arbitrary list of input trajectories to combine and extract from.
  In addition, it can override or add periodic box information.
  <LI> The DCD class will now handle reading of non-native endian DCD
  files
  <LI> The DCDWriter class will now flush the output streams after
  each frame is written to ensure all data is actually written to disk
</UL>

\subsection r133_bugs Bug Fixes
<UL>
  <LI> Fixed an issue with DCD's written by LOOS that have periodic
  boundary information.  The default unit cell angles were 1, rather
  than 90 degrees.  This prevents programs like VMD from correctly
  displaying the periodic images.
  <LI> Fixed a typo in the default alignment selection for the
  rmsd2ref tool
  <LI> Fixed a bug in several tools that affected using a PSF file for
  the model when writing out a PDB file that had been subset with a
  selection.
  <LI> The loos::averageStructure() function did not verify that the
  input vector<XForm> matches the numbef of frames in the passed
  trajectory.  This results in a segmentation fault when the
  trajectory has a bad header (i.e. the number of frames listed does
  not reflect the number of frames actually in the trajectory).  This
  case is now checked for and a slightly more sensible error is
  thrown.
  <LI> The error messages given when the LOOS could not decide what
  format a file is in were vague...this has been improved...
</UL>

\section release132 Version 1.3.2 (1-20-2009)
\subsection r132_bugs Bug Fixes
<UL>
 <LI> Fixed <B>severe</B> bug that results in bad connectivity
 information when reading from Amber prmtop files.
</UL>

\subsection r132_added_changed Added or Altered Functionality and Notables
<UL>
 <LI> Added Atom::isBoundTo()
</UL>

\section release131 Version 1.3.1 (1-14-2009)
\subsection r131_bugs Bug Fixes
<UL>
 <LI>Fixed bug affecting MacOS X 10.5 builds.
 <LI>Aligner wrote out its reference PDB uncentered even if given the
 "--center" flag.
 <LI>Aligner did not correctly compute average structure unless the
 "--rmsd" flag was given.
 <LI>The "--terms" flag for the svd tool was inadvertently removed.
</UL>


\section release130 Version 1.3.0 (12-22-2008)

\subsection r130_namespace Namespace Changes
This release represents some major changes to the internal structure
of LOOS.  First and foremost, virtually all of LOOS is now
encapsulated within the "loos" namespace whereas before much of loos
was in the global namespace.  This means that <tt>Atom a;</tt>
becomes <tt>loos::Atom a;</tt>.  Alternatively, you can place a using
directive at the top of your code,
\code
using namespace loos;

Atom a;
\endcode

LOOS also now respects your global namespace by not forcing the
importation of names that it uses, such as from the \c std namespace
or \c boost.  In fact, in versions prior to 1.3.0, LOOS would import
\c std into the global namespace.  If you were relying on this
behavior, you will now need to manually import in your code.  We
therefore recommend that you add the following to the start of all of
your code:
\code
using namespace std;
using namespace loos;
\endcode

Another \b major change in version 1.3.0 is the matrix handling code.
There is now a generic \c loos::Math::Matrix class that supports several different
ways of laying out the raw data (i.e. row major vs column major) and
can even support sparse storage.  This class in in the \c loos::Math
namespace.  It is important to note that the goal of this class is to
provide a controllable wrapper around a block of memory for
interfacing with ATLAS.  It is not meant to be a generic matrix in a
mathematical sense, despite being located in the \c loos::Math
namespace.  The polymorphic matrix I/O classes (i.e. \c MatrixReader and
\c MatrixWriter) are now gone, replaced by template functions \c
loos::writeAsciiMatrix() and \c loos::readAsciiMatrix().  The format used is just
a block of ASCII data that can be read in my Octave/MATLAB and
GnuPlot.  These reading and writing functions are in the \c loos
namespace, not the \c loos::Math namespace.  The reason for this is to
support the following pattern,
\code
using namespace std;
using namespace loos;

typedef Math::Matrix<double, Math::Triangular> Matrix;
...
Matrix M;
writeAsciiMatrix(filename, M, "My matrix");
\endcode

Additionally, math functions that were at a global scope, such as \c angle() and \c
torsion() are now in the \c loos::Math namespace.

\subsection r130_added_changed Added or Altered Functionality and Notables

<UL>
 <LI> There is an issue with tr1::unordered_set in gcc-4.0.1.  This
 the internal data structure used by the sparse matrix policy.  To
 work around this, LOOS will switch to using the GNU provided hash_map
 if you're using gcc-4.0.1.  This is most likely to affect MacOS users
 running 10.4 and XCode 2.5 and earlier.
 <LI> When \c loos::createSystem() sees an Amber prmtop file, it will
 automatically look for a corresponding .inpcrd file and load the
 coordinates from that.  Otherwise, it returns an AtomicGroup sans
 coordinates.
 <LI> The ensemble functions (such as \c loos::averageStructure()) now
 take a \c loos::pTraj instead of a reference to a \c
 loos::Trajectory&.
 <LI> Many of the tools now use the boost program_options library
 <LI> The alignment tool (<tt>aligner</tt>) now writes out the average
 structure as well, and has an option to center the aligned
 trajectory.
 <LI> Added <tt>subsetter</tt> tool that pulls a subset of a model out
 of a trajectory into a new, smaller trajectory.
 <LI> The \c PDB reader now only emits warnings for each unique
 unknown record read rather than a whole mess of 'em...
</UL>

\subsection r130_bugs Bug Fixes
<UL>
 <LI> Fixed a bug in the Amber trajectory reader that caused LOOS to
 incorrectly seek frames.  This affected using readFrame(i) but not
 readFrame().
 <LI> \c AtomicGroup::splitByMolecule() now handles groups without
 connectivity.
 <LI> Fixed a problem with the PDB reading code that mangled wide
 CONECT records.
</UL>



<hr>

\section release121 Version 1.2.1 (11-3-2008)
\subsection r121_bugs Bug Fixes
<UL>
 <LI> Fixed bug in crossing-waters tool
 <LI> Fixed bug in \c loos::Atom::clearPropertyBit() that caused it to
 not always toggle the correct bit.
</UL>


<hr>


\section release120 Version 1.2.0 (10-24-2008)
\subsection r120_changes Changes
<UL>
 <LI>Added <tt>helix_kink</tt> tool to determine bend-angles in
 helices.
 <LI> Added \c HeavySolventSelector
 <LI> Updated tools to use new convenience/factory functions, also
 making them a tad more universal in what inputs they can take.
 <LI> Added \c AtomicGroup::clearBonds() to remove connectivity in a
 group.
 <LI> \c PDB will out write out CONECT records when there are 10K
 atoms or greater, to prevent field overflow.
 <LI> \c Coord<T> can now extract itself from a stream.
 <LI> Added \c loos::selectAtoms() to parse a selection string and
 apply it to an \c AtomicGroup.
 <LI> Added support for writing out \c PDB CONECT records.

</UL>

\subsection r120_bugs Bug Fixes
<UL>
 <LI> Fixed problem with \c PDB output when there are more than 10K
 residues
 <LI> Fixed bug in \c DCDWriter that caused the output periodic
 box to be set to (1,1,1) regardless of what was passed in.
 <LI> Fixed problem when writing a \c PDB with bonds to missing
 atoms.  Bonds are now dereferenced prior to writing.  This means that
 the \c PDB is now no longer const when written and could be sorted.
 <LI> Fixed bug in width of CONECT record fields
 <LI> Fixed bug in \c DCD trajectories affecting seeking frames
 <LI> Fixed bug in \c DCD trajectories potentially affecting the
 number of frames sensed in a trajectory that comes from NAMD.
 <LI> Fixed bug in \c Atom::checkProperty() that caused
 erroneous results.
</UL>


<hr>

\section release110 Version 1.1.0 (9-12-2008)
\subsection r110_changes Changes
<UL>
 <LI> Major reorganization of the \c Trajectory class using a template
 pattern.
 <LI> Added \c CCPDB class for concatenated PDBs that you can treat as
 a \c Trajectory
 <LI> Added \c PDBTraj class for handling non-contiguous PDB
 trajectories
 <LI> Added \c TinkerArc class for TinkerArc (concatenated XYZ files)
 trajectories
 <LI> Changed \c Atom defaults to initialize atomid and resid to 1
 rather than -1
 <LI> Added tool to compute the RMSD between a selection and its
 average structure over the course of a trajectory
 <LI> Improved self-tests
 <LI> Added a new tool to reimage a trajectory by molecule
 <LI> Added \c AtomicGroup::apply() to call a functor or a function
 pointer on each \c Atom in an \c AtomicGroup.
 <LI> \c DCDWriter now long requires you to specify how many frames
 will be written--you can append and it will automatically update the
 header correctly.
</UL>


\subsection r110_bugs Bug Fixes
<UL>
 <LI> Fixed problem with typedefs in MacOS 10.5
 <LI> Fixed bug in \c ATom where setting coords using a \c GCoord ref
 not correctly setting the coords-bit.
 <LI> Fixed big in <tt>aligner</tt> where the first frame of the DCD
 was not transformed.
 <LI> Fixed bug in \c AtomicGroup::splitByMolecule() where the \c
 PeriodicBox was not propagated beyond the first group split.
 <LI> Fixed bug in <tt>svdcolmap</tt> tool that affected certain
 instances of using atomid maps.
 <LI> Fixed bug in \c loos::iterativeAlignment() where the returned \c
 XForms were incorrect.  The passed ensemble of \c AtomicGroup objects
 were correctly transformed, but anything that used the \c XForms were
 affected by varying degrees.
</UL>

*/
