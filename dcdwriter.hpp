/*
  dcdwriter.hpp
  (c) 2008 Tod D. Romo

  Grossfield Lab
  Department of Biochemistry and Biophysics
  University of Rochester Medical School

*/

#if !defined(DCDWRITER_HPP)
#define DCDWRITER_HPP

#include <iostream>
#include <fstream>
#include <string>
#include <stdexcept>
#include <exception>
#include <vector>
#include <boost/utility.hpp>

#include <loos.hpp>
#include <AtomicGroup.hpp>
#include <StreamWrapper.hpp>

using namespace std;

//! A <I>very</I> lightweight class for writing simple DCDs
class DCDWriter : public boost::noncopyable {

  // Use a union to convert data to appropriate type...
  typedef union { unsigned int ui; int i; char c[4]; float f; } DataOverlay; 

public:

  //! Setup for writing to a file named by \a s
  /** This requires you to setup the header appropriately and then write it...
   * \verbatim
DCDWriter dcd("output.dcd");
dcd.setHeader(500, 10, 1e-3, no);
dcd.setTitles("MY TITLE HERE");
dcd.writeHeader();
dcd.writeFrame(frame);
\endverbatim
   */
  DCDWriter(const string& s) : _natoms(0), _nsteps(0), _timestep(0.001),
			       _has_box(false), _ofs(s) {
    _titles.push_back("AUTO GENERATED BY LOOS");
  }

  //! Setup for writing to a stream
  DCDWriter(fstream& fs) : _natoms(0), _nsteps(0), _timestep(0.001),
			   _has_box(false), _ofs(fs) {
    _titles.push_back("AUTO GENERATED BY LOOS");
  }

  //! Writes the coordinates of \a grp to file \a s as a DCD.
  DCDWriter(const string& s, const vector<AtomicGroup>& grps) :
    _natoms(grps[0].size()),
    _nsteps(grps.size()),
    _timestep(1e-3),
    _has_box(grps[0].isPeriodic()),
    _ofs(s) {

    _titles.push_back("AUTO GENERATED BY LOOS");
    
    writeHeader();
    writeFrame(grps);
  }

  //! Sets header parameters
  /** These must be set prior to writing a header or frame, but it is
   *  not an error to not do so...
   *  Arguments:
   *  \arg \c na Number of atoms
   *  \arg \c ns Number of steps (total frames)
   *  \arg \c ts Timestep of each frame
   *  \arg \c bf Flag for whether or not each frame will include periodic box info as Xtal data
   */
  void setHeader(const int na, const int ns, const greal ts, const bool bf) {
    _natoms = na;
    _nsteps = ns;
    _timestep = ts;
    _has_box = bf;
  }

  void setTitles(const vector<string>& titles) { _titles = titles; }
  void setTitle(const string& s) { _titles.clear(); addTitle(s); }
  void addTitle(const string& s) { _titles.push_back(s); }

  void writeFrame(const AtomicGroup&);
  void writeFrame(const vector<AtomicGroup>&);

  void writeHeader(void);

private:
  void writeF77Line(StreamWrapper&, const char* const, const unsigned int); 
  string fixStringSize(const string&, const unsigned int);
  void writeBox(const GCoord&);


private:
  int _natoms, _nsteps;
  greal _timestep;
  int _current;
  bool _has_box;
  StreamWrapper _ofs;
  vector<string> _titles;
};



#endif
