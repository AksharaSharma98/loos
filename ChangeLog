2011-07-29    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in water-hist that caused a corrupted header in the
	output grid.
	* Changed vectorAsStringWithCommas() to suppress the trailing
	comma
	* Added a --brange option to water-hist to take the bulk estimate
	from a slice in Z

2011-07-28    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in xy_rdf that caused the by-molecule split-mode to
	not work correctly if the selection "pruned" any bonds.
	* Fixed bug in center-molecule where the --center and --center_xy
	options could not be used (this appears to relate to certain
	versions of BOOST Options).
	* Fixed bug in density-dist-windowed and rgyr that caused the
	first frame of the trajectory to be skipped if no explicit skip
	was specified.

2011-07-27    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in rgyr that did not write out correct bin coords when
	hist_min != 0
	* Changed rmsds so non-verbose mode does not give progress updates
	* Changed xy_rdf to not require --split-mode (correctly has
	default).  All RDF tools now list split-mode options in help.

2011-07-26    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in rdf tool where command-line options were not
	correctly handled.
	* Fixed bug in rdf and atomic-rdf tool for very large trajectories
	that resulted in negative values.
	
2011-07-08    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in Trajectory class where the following caused a
	duplicate first-frame to be read:
	   traj->readFrame(0);   // Reads first frame
	   traj->readFrame();    // Should read second frame
	The second line would instead return the first frame again.

2011-07-01    <tromo@spade.biophysics.rochester.edu>

	* Changed AtomicGroup::append() and AtomicGroup::remove()
	functions to return a reference to the AtomicGroup operated on.
	This means you can now chain operations,
	i.e. foo.add().add().add()

2011-06-21    <tromo@spade.biophysics.rochester.edu>
	* Added cosine content tools to the Convergence Package
	* Fixed a minor bug with ramachandran where structures containing
	multiple chains were not handled correctly at the chain terminii
	(i.e. ramachandran would treat the structure as one contiguous
	chain with only two terminii).
	* Added a transpose() function for matrices (this is NOT an
	in-place transposition, so beware of memory constraints)
	* Added support for using different selections for the trajectory
	and the reference structure in rmsd2ref
	* Fixed bug in avgconv where using the default block-sizes would
	cause a segfault.
	* Changed the output metadata header (from invocationHeader()) to
	include the current working directory, if available.

2011-05-26    <tromo@spade.biophysics.rochester.edu>

	* MAJOR reorganization of how LOOS is structured.  Tool suites are
	now "packages" and contained within the "Packages" directory.  The
	Tools directory now only contains the "core" set of LOOS tools.
	* Added an OptionsFramework and AggregateOptions class to provide
	a more consistent set of options across most tools and packages.
	See the class documentation for OptionsFramework for more details.
	***IMPORTANT NOTE***  This means that command-line options for
	most tools have changed.  In particular, many of the single-letter
	shortcut options have changed or been removed.
	* Added a Packages/User directory that contains "template"
	programs for common tasks.  To write a new tool, copy the template
	that is closest to what you want to do, then edit the regions
	marked by "***EDIT***" comments.
	* Added several general utility functions include:
	loadStructureWithCoords(), assignTrajectoryFrames(), and
	vectorAsStringWithCommas<T>().
	* Added a "Density Tools" package.  This is used primarily for
	water visualization and analysis.

2011-05-18    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug where charmm.hpp was not installed

2011-05-15  Tod Romo  <tromo@Gorgoneion.local>

	* Fixed bug in eigenflucc tool where the zero-modes would be
	included when requesting "all" modes.
	* Added support for hybrid-36 encoding of atomids and resids in
	PSF files.

2011-04-18    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in GRO file handling where the periodic box was
	not converted into Angstroms.

2011-03-21    <tromo@spade.biophysics.rochester.edu>

	* Changed library search order to fix a problem that cropped up on
	some Fedora 14 installs.
	* Fixed bug in avgconv that caused a core dump when using
	automatic block-sizes.

2011-02-15    <alan@membrane>
	* Added option to Tools/merge-traj to fix by molecule, so that
	trajectories that have molecules broken across the periodic boundary (eg
	gromacs output) come out looking clean
2011-02-11    <alan@membrane>
	* Added a simply xy-only option to recenter-trj
	* Modified recenter-trj to be more robust (although half as fast), so that
	it does the right thing even if the centering selection is split
	across the periodic image
2011-02-02    <alan@membrane>
	* Modified Tools/density-dist to fold in the functionality from
	density-dist-windowed.  The latter is marked deprecated.  Note: to get
	around a design flaw in boost program options, you have to manually
	specify --minz and --maxz (because program options tries to grab
	negative numbers as options).
2011-02-02    <tromo@spade>
	* Modified Tools/density-dist to use boost program options, and added a
	  symmetrize flag to make the density symmetric about the membrane center.
	  This assumes the trajectory has already been aligned with the
	  membrane center at z=0 for each frame.  This can easily be accomplished
	  when you merge and downsample your trajectories using merge-traj, which
	  has an option to allow you to center a specific selection (eg your
	  lipids).
2011-01-28    <alan@membrane.urmc.rochester.edu>

	* Modified Tools/order_params.  Now uses boost program options (command
	line is similar, but not precisely backward compatible), has the option to
	use y or x as the direction of the magnetic field, and has the option to
	dump out the timeseries of the order parameters.  Specifically, the last
	quantity is computes the average instantaneous order parameter for each
	carbon position at each time point.  The "+/-" column in the output is the
	stdev of these timeseries, which is _not_ a good measure of the
	statistical uncertainty.  To get that, one should use block averaging on
	the time series.  This is also an option -- in principle, you read off the
	plateau value from the block averaging plot, but since this plateau is
	noisy, I make you specify a range of block sizes over which to average
	(the defaults are 2 blocks to 5 blocks, but you really should run the
	program twice, and the first time look at the block averaging plots to see
	where the block standard error converges.

2011-01-14    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in AtomicGroup::renumberWithBonds() that would blindly
	try to renumber bonds for atoms that had no bonds.

2010-12-20    <tromo@spade.biophysics.rochester.edu>

	* Changed AtomicGroup::splitByMolecule() so that it should be 20x-30x faster.
	* Changed AtomicGroup::sort() to not trust the sorted status and to ALWAYS sort.

2010-12-20    <alan@membrane>
	* Changes Tools/xy_rdf.  Now able to split by molecule, residue, or
	  segment.  Also, merged the functionality of xy_rdf_timeseries into
	  xy_rdf.  xy_rdf_timeseries is now deprecated, and will be deleted
	  before the next release.

2010-12-17    <alan@membrane>
	* Changed Tools/rdf to be able to split by molecule, residue, or segment.
	  Now uses boost program options, so the command line is not backward
	  compatible.  TODO: add a fullhelp option


2010-11-30    <tromo@spade.biophysics.rochester.edu>

	* Changed covarianceOverlap() routine to use BLAS and faster
	matrix operations for significant performance boost.
	* Added z-scored covariance overlap (zCovarianceOverlap()) along
	with support for this in the coverlap tool.

2010-11-22    <tromo@spade.biophysics.rochester.edu>

	* Fixed [another] compiler issue in AtomicGroup for older g++
	compilers
	* Changed INSTALL to include latest debian, OpenSUSE, Fedora,
	Ubuntu, and cygwin (windows).
	* Added test results for cygwin

2010-10-25 Tod Romo <tromo@gorgoneion>
	* Fixed typename issue in AtomicGroup that caused some g++
	compilers to complain.
	* Changed TimeSeries tests to reflect code changes
	* Fixed bug in big-svd where the RSVs were not normalized

2010-10-15 Tod Romo <tromo@gorgoneion>
	* Fixed bug in svd tool for MacOS (more precisely, it's a bug in
	vecLib affecting single-precision SVDs and macs only)

2010-10-08    <tromo@spade.biophysics.rochester.edu>

	* Added convergence tools (beta releases only)
	* Deprecated features from aligner removed
	* Added ability to use aligner to align trajectory to a reference
	structure.
	* Added block averaging tool (Alan).
	* Fixed bug when computing variance in TimeSeries (Alan)

2010-09-16 Tod Romo <tromo@gorgoneion>
	* Added kurskew tool to calculate kurtosis and skewness for RSVs
	* Changed phase-pdb...several improvements, see --help for more
	details.
	* Changed averager so that bonds are pruned (rather than cleared)
	when subsetting.
	* Added N-M Simplex optimizer 
	* Changed MDuple to Math::Range for matrix I/O
	* Added submatrix extraction and column-vector normalization
	routines.
	* Changed the default number of modes to use for the subspace
	overlap in the coverlap tool.
	
2010-09-16 Tod Romo <tromo@gorgoneion>
	* Changed randomRNG() to use uint rather than long for seed and
	also to return the used seed value (for autogenerated seeds)
	
2010-09-14 Alan <alan@membrane.urmc.rochester.edu>
	* Added ability to compute order parameters with respect to x and
	y axes.

	
	
2010-09-10  Tod Romo  <tromo@gorgoneion>

	* Fixed bug affecting calling Trajectory::rewind() on Tinker ARC files

2010-08-23    <tromo@spade.biophysics.rochester.edu>

	* Changed the Elastic Networking Tools.  This is a total revamp of
	the ENM code to turn it into a useful library as well as a suite
	of tools.  More information can be found in the Doxygen
	documentation for namespace ENM or in the ENM module.
	* Changed AtomicGroup::findById() so that it no longer implicitly
	sorts atoms in the contained AtomicGroup.  If the group has been
	explicitly sorted (AtomicGroup::sort()), then the old binary
	search will be used.  Otherwise, a linear search will be used.
	* Added AtomicGroup::pruneBonds() to remove bonds to non-existant
	atoms (for subsetted AtomicGroups).
	

	
2010-07-27    <tromo@spade.biophysics.rochester.edu>

	* Added a tool for perturbing structures randomly
	* Added a new tool for computing ENM fluctuations and mapping them
	onto a structure (eigenflucc).
	* Deprecated the flucc2b tool
	* Fixed minor issues in h-bonding tools and improved help
	messages.
	* Added covariance overlap tool
	* Fixed issue in AtomicGroup::superposition where failures in the
	alignment code would not get caught.
	* Changed svd tool to use doubles rather than floats.  This is in
	part to address a bug in MacOS 10.6 that causes the SVD to fail
	without flagging it as an error.  This only seemed to occur in
	certain rare circumstances (e.g. multiple, very similar
	trajectories).  Symptoms of the problem include non-orthogonal
	LSVs and no 6 zero-svals.
	* Added big-svd tool to compute the SVD of large systems.  It uses
	floats rather than doubles.  More importantly, if A is m x n, then
	the RSV matrix V would be n x n, which can be huge.  Here, only
	the first m columns of V are computed.
	* Fixed bug in writing of internally transposed matrices.
	* Deprecated the use of the transpose flag in ACSII matrices
	(i.e. in the file format)
	* Fixed bug in the Matrix code that affected large matrices
	(i.e. where m * n >= 2^32)
	* Fixed bug in traj2matlab where the wrong subset of atoms was
	used to create the matrix.
	

2010-07-06    <tromo@spade.biophysics.rochester.edu>

	* Added support for some STL algorithms with TimeSeries
	(i.e. begin, end, and push_back)
	* Added a set of hydrogen-bonding analysis tools in
	Tools/HydrogenBonds

2010-06-22    <tromo@spade.biophysics.rochester.edu>

	* Added support for accesing the shared periodic box contained in
	an AtomicGroup.


2010-06-21    <alan@membrane.biophysics.rochester.edu>
	* Changed order_params to handle both 1- and 3-residue per lipid
	  formats. Verified works for new and old CHARMM parameters.
	
2010-06-11    <tromo@spade.biophysics.rochester.edu>

	* Fixed library link order for linux.  Will now correctly link
	against ATLAS first, then LAPACK...
	
2010-06-02    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in AtomicGroup::perturbCoords() where the directions
	picked were not actually uniform on the sphere.

2010-04-22    <tromo@spade.biophysics.rochester.edu>

	* Changed build system to handle installing pre-build docs
	better.  Note that the existing installed docs dir will be
	removed, then the pre-built will be copied into its place.

2010-04-07    <tromo@spade.biophysics.rochester.edu>

	* Changed SuperBlock in the ENM tools to catch and truncate
	negative spring constants

2010-03-24    <tromo@spade.biophysics.rochester.edu>

	* Changed VSA/ANM to accept user-defined HCA constants
	* Fixed bug in parser code where Debian systems didn't have EOF
	already defined.
	* Changed linux numerical code to use blas rather than cblas
	* Fixed SConstruct to make support for Ubuntu/SUSE better
	* Changed AtomicGroup::rmsd() to take a constant arg (i.e. it no
	longer implicitly sorts the corresponding AtomicGroup objects)
	* Changed porcupine tool to have fixed-length tips rather than
	proportional ones.
	* Changed porcupine tool to make tagging of altered atoms via
	altLoc optional.

2010-03-02    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in DescendingSort sort predicate causing it to sort
	ascending.

2010-02-20  Tod Romo  <tromo@gorgoneion-w>

	* Changed contact-time to filter target atoms so that only nearby
	atoms are considered in the all-to-all check.


2010-02-18    <tromo@spade.biophysics.rochester.edu>

	* Added center-molecule tool...a slightly more flexible tool for
	centering molecules than center-pdb
	* Added contact-time, a tool for computing the number of contacts
	between a "probe" selection and a set of "targets" over time, with
	various methods of normalizing the output.

2010-02-10  Tod Romo  <tromo@gorgoneion-w>

	* Changed PDB::fromAtomicGroup so that if the AtomicGroup has a
	periodic box, then the PDB's UnitCell is set to the same
	dimensions (with 90 degrees for all angles).  This will the be
	written out as a CRYST1 record.
	* Changed PDB::unitCell() so that the unitCell& it returns is a
	const.

2010-02-05    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in aligner that sometimes caused the target selection
	to not be correctly centered.  The frames were still aligned
	correctly, but the global center was not correctly applied.

2010-02-02    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in svd function that takes a vector of AtomicGroup's
	and when aligning is requested...the alignment transform is
	applied twice to each AtomicGroup.  No other svd calls were
	affected and no LOOS tools were affected by this.

2010-01-13    <tromo@spade.biophysics.rochester.edu>

	* Changed ENM code so that the Hessian construction is in its own
	module.
	* Fixed numerous problems in VSA code.  It now works correctly
	(i.e. gives mass-weighted eigenvectors).  It can also be run in a
	unit-mass mode.
	* Added support for various forms of weighting in the Hessian.

2009-12-28    <tromo@spade.biophysics.rochester.edu>

	* Added support for doctoring PDB files to include masses
	(i.e. new tools in ElasticNetworks)
	* Changed matrix code to support single or double precision
	matrices through overloading.
	* Changed permutation and overlap codes to be template-based, so
	will work with any Matrix form (though you cannot mix and match
	them).
	* Changed ENM tools to use double precision and high precision in
	ASCII output...

2009-12-07    <tromo@spade.biophysics.rochester.edu>

	* Changed DCDWriter substantially...  It no longer uses a
	StreamWrapper, but manages its own iostream*.  Optional flag to
	constructors control whether the iostream* is deleted on
	destruction or not.
	* Added ability to use DCDWriter to append to an existing DCD.
	* Added merge-dcd tool (alan)

2009-12-02    <alan@membrane.biophysics.rochester.edu>

	* Changed correl method in TimeSeries so normalization is now optional

2009-11-13    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in enmovie tool where bond connectivity was not
	cleared before writing the reference PDB.  The reference PDB is
	also renumbered to correctly match the output DCD.

2009-11-10    <tromo@spade.biophysics.rochester.edu>

	* Upgrades to rebond tool.  See tool help for details.
	* Fixed bug in svd tool requiring a valid alignment selection even
	if no aligning was done.
	* Fixed bug in extractCoords() causing it to fail for any
	invocation
	* Added covariance and subspace overlap functions

2009-11-05    <tromo@spade.biophysics.rochester.edu>

	* Changed anm and gnm tools to not write out the right singular
	vectors (as it's unlikely these would actually be needed)

2009-11-04    <tromo@spade.biophysics.rochester.edu>

	* Changed exposure so that it can now operate over a range of frames

	* Changed porcupine to use new-style command-line flags

	* Added a VSA (vibrational subsystem analysis) tool

	* Changed the enmovie tool to be a little more generic and
	useful.  See the help information regarding how its invocation has
	changed.

	* Changed the output of the ENM tools...  For ENM results, the
	smallest non-zero eigenvalue corresponds to the lowest frequency
	motion.  These came at the end of the output from the ENM tools,
	which can cause confusion.  We therefore now sort the eigenpairs
	so that the smallest (i.e. lowest frequency) come first.  The zero
	modes are not stripped off.

	* Added a set of generic sorting functions that will sort a
	container and return a vector giving the indices that can be used
	to permute the container into the sorted order.  This is useful
	for doing things like sorting multiple containers based on the
	contents of one.

	* Added a suite of overloaded operators and support functions for
	operations on matrices.  Note: these are for quick-n-dirty tool
	development.  If you want performance or efficiency, you're
	strongly encouraged to look for a better method for implementing
	your linear algebra code.

	* Added alignto tool that aligns a trajectory to a given reference
	structure.
	

2009-10-20    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in subsetter that caused reimaging to ONLY be
	performed if centering was turned on.

	* Fixed bug in subsetter that caused bonds to not be cleared when
	subsetting...
	

	* Changed exposure to default to reimaging distances.  Also
	changed how the flag is set.  "-R 1" turns reimaging on (the
	default) and "-R 0" turns it off.

2009-10-10  Tod Romo  <tromo@gorgoneion>

	* Changed AtomicGroup::principalAxis() to automatically scale the
	returned eigenvalues by the number of atoms used in the
	calculation.  Previously, the UNSCALED eigenvalues were returned.

2009-10-09    <tromo@spade.biophysics.rochester.edu>

	* Added AtomicGroup::splitByName() which returns a std::map
	mapping unique atom names to an AtomicGroup containing only those
	atoms (by Alan)

	* Added support for a LOOS family of exceptions in exception.hpp.
	LOOS will gradually migrate to using LOOSError derived exceptions
	for errors that are specific to LOOS...

	* Fixed bug where readFrame() incorrectly returned a false on the
	first frame of an Amber restart file.

2009-10-06    <tromo@spade.biophysics.rochester.edu>

	* Fixed a bug where segname was not properly handled as a synonym
	for segid...

2009-09-23    <tromo@spade.biophysics.rochester.edu>

	* Fixed a bug in the CCPDB and PDBTraj classes when using
	updateGroupCoords with an AtomicGroup that is a subset of the
	model that corresponds to the trajectory.  Previously,
	updateGroupCoords simply copies coordinates directly into the
	passed AtomicGroup.  If the AtomicGroup is a subset, however, this
	would result in incorrect coordinates.  This has been fixed so
	that if the passed AtomicGroup is the same size as the one used to
	create the Trajectory, then the coordinates are copied straight as
	before.  However, if the passed AtomicGroup is a different size,
	then the atom id's are assumed to be indices (+1) into the
	trajectory frame.

2009-09-21    <tromo@spade.biophysics.rochester.edu>

	* Fixed install target--was missing trr.hpp

2009-09-03  Tod Romo  <tromo@gorgoneion>

	* Fixed bug in DCD::updateGroupCoords where the upper-bounds check
	on atomid's was incorrect.
	* Fixed problem with spurious complete rebuilds of LOOS by SCons
	* Changed rmsds so it can work with a subset of frames from the
	trajectory
	* Fixed bug in box size reported by bounding tool
	* Updates to several tools to be consistent with contemporary LOOS
	style
	* SVD now only writes out the non-zero RSV's (i.e. those that have
	non-zero singular values).
	* Added a "not" operator to the selection language.  This can be
	used in lieu of the '!' character, so you don't have to worry
	about shells munging it.
	* Changed the parseAsString<> family to explicitly initialize
	return values to 0 and return this on an error, rather than rely
	on the default type initialization.
	* Added hybrid-36 support for PDBs.  See
	http://cci.lbl.gov/hybrid_36 for more details.  LOOS internally
	translates the hybrid-36 codes into integers.  LOOS does not yet
	support the 2-char chainId.
	* Fixed bug affecting writeAsciiMatrix() when using a dense matrix
	and only writing out a subset of the matrix.  The size of the
	sub-matrix encoded in the output metadata was incorrect.

2009-08-10    <tromo@spade.biophysics.rochester.edu>

	* Added support for Gromacs TRR files.  The reader can handle
	either double or single precision TRR files, but internally, all
	data is converted into doubles (or GCoords).

2009-08-04    <tromo@spade.biophysics.rochester.edu>

	* Added safety check in DCDWriter that prevents modifying the
	header (such as adding new title lines to it) once it has been
	written to the trajectory.

2009-08-03  Tod Romo  <tromo@gorgoneion-w>

	* Changed the Fmt formatter will now truncate output so that it is
	never greater than the requested field-width.
	* Added fixedSizeFormat() to aid creating text fields for output
	that will be truncated to their max size.
	* Changed PDB and GRO reading code so if there are >= 100,000
	atoms read in, they will be renumbered to be monotonically
	increasing.
	* Changed PDB output code to have fixed field-widths (i.e. maximum
	field widths).  LOOS now adhears closer to the PDB v2.2 spec with
	the exception that residue names are 4-characters long.

2009-07-31    <tromo@spade.biophysics.rochester.edu>

	* Added utility functions for extracting type-specific records
	from a string (loos::parseStringAs<>()).  This is useful if you
	need to extract columns from a line of input, for example.
	* Changed the underlying stream type in all trajectories from
	fstream to iostream.  This should not break anything unless you've
	written your own Trajectory subclass.  This really should have
	been an iostream in the first place so that it doesn't matter what
	kind of stream you're passing to the Trajectory classes (i.e. it
	could just as easily be a stringstream).
	* Fixed a couple of trajectory subclasses (such as AmberTraj) that
	didn't provide a constructor with a stream.
	* Changed the Trajectory subclasses to move the implementation
	functions to be private.  These really should not have been
	exposed in the first place.  This does have the potential to break
	code that was relying on the internals of the subclasses.
	* Added an XDR class for simulating the rpc/xdr library, but it's
	templated so it has a [hopefully] easier API and it works with C++
	streams.
	* Added support for Gromacs .gro and .xtc (single-precision only)
	files.  Note:  coordinates are transformed into Angstroms!

2009-07-08    <tromo@spade.biophysics.rochester.edu>

	* Added some new bits to Atoms that can be set/queried by the
	programmer...  flagbit, and usr1bit through usr3bit.

2009-07-07    <tromo@spade.biophysics.rochester.edu>

	* Added support for testing atom equality using the binary
	predicates: AtomEquals and AtomCoordsEquals
	* Added support for testing whether an AtomicGroup contains an
	atom or another group via the AtomicGroup::contains() member
	function.  This function can take an atom-comparison policy, or
	use the default AtomEquals (which just compares names, ids, and
	segids)
	* Changed AtomicGroup::intersect() to now use an atom comparison
	policy rather than comparing the pAtom addresses.
	* Readded ubuntu-specific check.
	

2009-07-01    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in AtomicGroup::findBonds().  Changed default distance
	threshold to 1.25 \AA.
	* Added support for reimaging in subsetter
	* Added support for multiple verbosity levels in subsetter
	* Changed PDB output to now prune the connectivity output if atoms
	are missing...this means you do not nead to clearBonds() prior to
	writing out a PDB.

2009-06-29    <tromo@spade.biophysics.rochester.edu>

	* Added AtomicGroup::findBonds() to perform a distance-based
	search... 

2009-06-22    <tromo@spade.biophysics.rochester.edu>

	* Changed subsetter to permit numerical sorting of the input
	trajectory files.  The sort key can be extracted by using either a
	scanf-style format or a regular expression.
	* Fixed bug in subsetter where verbosity was always turned on.
	* Changed the centroid reporting in trajinfo to report the
	centroid of a selection.
	* Changed the size of the test PDB file so it's much more
	reasonably sized.
	* Changed test code to reflect changes in PDB test file, including
	updating of expected test output.

2009-06-18    <tromo@spade.biophysics.rochester.edu>

	* Changed the specs for classes derived from the Trajectory
	class.  All derived classes must now ensure that the first frame
	of the trajectory is read in and cached as part of their
	initialization.  In order to keep the readFrame() iterator from
	skipping the first frame, the derived classes must also set the
	cached_first flag.
	* Added support for Tinker format in the factory functions.
	* Added centerOfElectrons() method to AtomicGroup (by Alan)
	* Fixed bug in subsetter where out-of-range frame indices caused a
	seg-fault.
	* Changed bounding to report periodic box size (not just the
	extents).
	* Added renum-pdb tool to renumber a model
	* Added an AtomNameSelector() that will select an atom with the
	passed name.  AtomNameSelector("CA") should be used instead of
	CAlphaSelector(), which is now deprecated.
	* Removed ubuntu-specific build check, given the new build
	protocol for ubuntu (see the Doxygen docs for more information)
	

2009-05-15    <tromo@spade.biophysics.rochester.edu>

	* Added support for Amber RST and INPCRD files as a single-frame
	trajectory.  This is handled transparently by createTrajectory()
	* Changed the Trajectory interface slightly...  Seeking and
	rewinding now use non-virtual inheritance so that conditions can
	be imposed on the function invocation (namely to invalidate the
	cached_first flag).  This change SHOULD be transparent

2009-05-13    <tromo@spade.biophysics.rochester.edu>
	* Fixed problem with averager where it was caching all frames of
	the trajectory.  It will now scan through the trajectory so it
	wont swap with large files...
	* Fixed some issues with the SConstruct
	* Added a revision tag to the build/tool output when building from
	the trunk.
	* Added a check for building with ubuntu because of a potential
	problem with atlas not linking with gfortran
	* Added AtomicGroup::splitByResidue()
	* Added tool to calculate ramachandran plots for proteins and RNA
	

2009-04-03    <tromo@spade.biophysics.rochester.edu>
	* Fixed bug in averager that caused it NOT to respect the range of
	trajectory frames given on the command-line

2009-03-20    <tromo@spade.biophysics.rochester.edu>
	* Added tool "drifter" to look at centroid drift
	* Added tool "porcupine" to generate porcupine models from SVD/ENM
	results.

2009-03-11    <tromo@spade.biophysics.rochester.edu>
	* Added a number of support/utility functions to read a whole
	trajectory in, to align/average over specific frames in a
	trajectory, and an SVD function that is a front-end to
	Atlas/Accelerate.

2009-03-09    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in rmsds that caused incorrect average rmsd calculation

2009-02-24    <tromo@spade.biophysics.rochester.edu>

	* Added a set of classes for providing flexible progress updates
	to the user.  See the Doxygen docs for the ProgressCounter class
	for more information.  See Tools/rmsds.cpp for an example of how
	to use the new classes.
	* Removed BOOST_FOREACH usage.  This solves a compatability issue
	with older versions of BOOST.

2009-02-20    <tromo@gorgoneion-w>

	* Added rotamer tool to calculate chi-1, chi-2 torsion angles over
	time...
	* Added Elastic Network Model tools (ANM/GNM)
	* Added rmsfit tool to superimpose two structures
	* rmsds tool now reports simple statistics for the matrices it
	constructs
	* Added install target for SCons...
	* Added support for building a shared-library version of LOOS
	

2009-02-17    <tromo@spade.biophysics.rochester.edu>

	* Fixed potential issue with histogram size/bounds for rdf
	tools... 

2009-02-16    <tromo@gorgoneion>

	* Fixed bug in aligner when centering the trajectory and when
	using different alignment and transformation subsets...

2009-02-09    <tromo@spade.biophysics.rochester.edu>

	* Added profile=1 build option for inserting profiling flags
	* Added more sensible error message from the auto-file-type
	divination code in the factory functions.
	* Changed subsetter so that the centering selection is applied to
	the subset rather than the model...it doesn't make much sense to
	center on something that's not in the output...

2009-02-06    <tromo@spade.biophysics.rochester.edu>

	* Added box override/setting to subsetter
	* Fixed problem with DCDWriter not writing out rectangular angles
	for unit cells by default.
	* Added more diagnostics to dcdinfo
	* Fixed bug in several tools that could cause an error when
	using a PSF for the model and applying a selection to it.
	* Added verification of the number of frames in a trajectory with
	trajinfo.
	* Added optional centroid reporting for trajinfo
	* Added improved error-checking when using
	loos::averageStructure().  This catches cases where a trajectory
	header and the physical trajectory have differing number of
	frames.
	* Added generic byte-swapping templated function to utils.hpp
	

2009-02-05    <tromo@spade.biophysics.rochester.edu>

	* Added tool to concatenate atoms together from a trajectory into
	a single PDB (for visualizing distributions of atoms over time)
	* Added ability to give a selection (subset) in frame2pdb
	* Added trajinfo tool to return information about generic
	trajectories
	* Added blurrogram.pl, a PERL program for automatically generating
	"blurrograms" suitable for visualizing in Pymol
	* Changed the svd tool to always write out an average structure
	* Changed the way LOOS parses range lists so it can now take a
	vector of strings representing ranges and parse all of them
	together.  A non-templated parseRangeList() is still retained for
	legacy code.
	* Changed subsetter so that it can now accept a list of arbirary
	ranges of frames to extract or, alternativey, a stride
	(step-size).  Subsetter can now also take multiple input
	trajectories and combine them (a la catdcd).  NOTE: this means the
	command-line syntax has changed...  You specify the output prefix
	FIRST, then the model, followed by the list of input trajectories.
	* Changed the DCD class so it now automatically detects non-native
	endian files and byte-swaps them on input.  Note that the
	DCDWriter will still only write out DCD's in the native format.
	* Fixed bug in rmsd2ref where the default alignment selection had
	a typo...
	* Added AtomicGroup::merge() function to find the union of two
	groups

2009-01-21    <alan@spade.biophysics.rochester.edu>

	* Added translate member function to AtomicGroup for convenience
	* Added recenter-trj tool to center trajectories
	* Changed DCDWriter to explicitly flush the output after every
	frame is written.

2009-01-19    <tromo@spade.biophysics.rochester.edu>

	* Added Atom::isBoundTo() to check whether or not one atom is
	bound to another
	* Fixed severe bug in reading Amber prmtop files that resulted in
	incorrect connectivity information.

2009-01-14    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in aligner where average structure was not correctly
	computed unless --rmsd was used
	* Added warning in svdcolmap when b's will go negative (and
	clamped them to 0)
	* Added the --terms command-line option back to svd

2009-01-02    <tromo@gorgoneion>

	* Fixed bug in build for MacOS X 10.5 (missing types)
	* Fixed bug in aligner where the PDB that's written out was not
	centered despite giving it the "--center" flag.

2008-12-22    <tromo@spade.biophysics.rochester.edu>

	* Changed the sparse matrix policy to use the GNU provided
	hash_map rather than the tr1::unordered_map if you're using
	gcc-4.0.1.  This is to work around an issue with the
	tr1::unordered_map implementation in gcc-4.0.1.

2008-12-18    <tromo@gorgoneion>

	* Fixed moderately severe bug when reading Amber trajectories by
	using readFrame(i) rather than readFrame().

2008-12-18    <tromo@spade.biophysics.rochester.edu>

	* Changed loos::createSystem() so that it will automatically look
	for a coordinate file if passed an Amber prmtop file.  If found,
	it will load those coordinates in.

2008-12-17    <tromo@spade.biophysics.rochester.edu>

	* Changed PDB output to allow for >= 100000 atoms/residues.  The
	catch is that this is a hack and will exclude altloc/chainid
	info.  However, the output PDBs are readable by pymol...

	* Matrix output now uses a formatting functor so you can adjust
	the output precision, or do whatever you want to with it...

	* Added tool for torsion timeseries (alan)

	* Changed AtomicGroup::splitByMolecule() to automatically sort
	each returned AtomicGroup...this solves a problem when use
	splitByMolecule() and then try to match the molecules with a DCD
	that's being written.
	

	

2008-12-12    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in AtomicGroup::PrincipalAxes() where coord array was
	deleted incorrectly...

2008-12-09    <tromo@spade.biophysics.rochester.edu>

	* Moved ALMOST everything into loos namespace, save for the
	lexer.
	* Fixed problem with SCons not regenerating lex/yacc output
	properly with the reparse=1 option
	* Removed top-level typdefs for uint/ulong (assuming they're part
	of the default set of typedefs)
	* Changed the SConstruct so that it tests for ulong/uint and
	defines appropriate flags for loos.  This is in case your system
	doesn't define one or the other.

2008-12-08    <tromo@spade.biophysics.rochester.edu>

	* Moved most of the internal classes/routines related to the
	parsing system into the loos::internal namespace.

2008-12-05    <tromo@gorgoneion-w>

	* Moved Matrix classes into loos::Math namespace

2008-12-05    <tromo@gorgoneion.urmc-sh.rochester.edu>

	* Added a new matrix class
	* Changed matrix IO to use the new templated function calls rather
	than the polymorphic writer/reader classes.
	* Removed injection of boost namespace into top-level by LOOS
	* Changed ensemble functions to take a pTraj (pointer to a
	trajectory) rather than a reference to a Trajectory object.
	* Added boost_program_options to the libs that must be linked
	against (and in the custom.py-proto)
	* Changed the svd tool to always write the map out, and the
	default naming scheme has been changed slightly (it will default
	to the base-name of the input trajectory unless you explicitly
	specify a prefix).
	

2008-12-04    <tromo@spade.biophysics.rochester.edu>

	* Changed Tools/aligner to write out the average structure as the
	PDB corresponding to the aligned DCD rather than just taking the
	first frame of the trajectory.

2008-11-25    <tromo@spade.biophysics.rochester.edu>

	* Changed AtomicGroup::splitByMolecule() to short-circuit if the
	group has no bond connectivity and return a vector with the entire
	group as its only member.
	* Changed Tools/reimage-by-molecule to be more generic in what
	types of files it will take.  Since you could now give it a file
	without connectivity, it detects this and warns the user...
	* Added subsetter tool to pull out a subset from a trajectory.

2008-11-21    <tromo@spade.biophysics.rochester.edu>

	* Changed BadConnectivity exception to inherit from runtime_error.
	Now accepts a string to stick into what().
	* Changed CONECT record reading to use fixed field widths
	* Changed PDB read code to keep track of what unknown records have
	been seen, so warnings are only emitted once for each unique
	unknown record.

2008-11-03    <alan@spade.biophysics.rochester.edu>

	* Fixed bug in crossing-waters tool where the entry side of the
	water was never set.

2008-10-31    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in Atom::clearPropertyBit() that caused it to
	incorrectly toggle other bits (and not always clear the bit it
	meant to).  This primarily affected the aligner tool.

2008-10-27    <tromo@spade.biophysics.rochester.edu>

	* Changed the internal has used in LOOS from SGI's hash_set to
	tr1::unordered_set.  This means that any code that relied on loos
	automatically included ext/hash_set will now need to either switch
	to using the tr1 equivalent, or explicitly include the hash_set
	header...

2008-10-23    <tromo@gorgoneion.urmc-sh.rochester.edu>

	* Added helix_kink tool
	* Fixed problem with PDB output with 10,000 residues or more
	* Fixed problem with automatically using loos namespace.  LOOS
	clients should either use fully qualified names for things in the
	loos namespace, or add a "using namespase loos" statement.
	* Added HeavySolventSelector to get non-hydrogen water atoms
	* Changed tools to use new convenience functions and factory
	functions.

2008-10-21    <tromo@spade.biophysics.rochester.edu>

	* Updated contacts to use any model filetype and any trajectory type.

2008-10-20    <tromo@spade.biophysics.rochester.edu>

	* Fixed MAJOR bug in DCDWriter that caused output periodic box
	sizes be set to (1,1,1).

2008-10-15    <tromo@spade.biophysics.rochester.edu>

	* Added AtomicGroup::clearBonds() to wipe out connectivity in a group.
	* Fixed problem in writing PDBs with bonds to missing atoms.
	Bonds are now deferenced prior to writing.  NOTE that this now
	means the PDB is no longer const when written and it will be sorted...

2008-10-14    <tromo@spade.biophysics.rochester.edu>

	* Fixed bug in width of CONECT record fields
	* Added check in PDB output to not append CONECT records if there
	are atomid's >99999 to prevent field overflow.
	* Added rudimentary support for extracting a Coord<T> from a stream.
	* Fixed bug in DCD trajectories affecting seeking frames
	* Fixed bug in DCD trajectories potentially affecting reading the
	number of frames in a trajectory that comes from NAMD.

2008-09-30    <tromo@spade.biophysics.rochester.edu>

	* Changed AtomicGroup::select() to be a const function
	* Added loos::selectAtoms() to parse a selection string and apply
	it to an AtomicGroup.

2008-09-19    <tromo@spade.biophysics.rochester.edu>

	* Added support for writing out CONECT records for PDBs
	* Fixed bug in Atom::checkProperty() that caused erroneous results

2008-09-08    <tromo@spade.biophysics.rochester.edu>

	* Added autocorrelation function to time-series class (Alan)

	* Added tool to compute probability dbn of radius of gyration (Alan)

	* Changed rmsd2avg tool to rmsd2ref tool since it now supports
	using an external reference structure.

	* Fixed another small bug in iterative alignment that affects
	groups that were not already close to their centroid.

2008-08-11    <tromo@spade.biophysics.rochester.edu>

	* Major reorganization of Trajectory class.  The class now uses a
	template pattern for reading frames in addition to being an
	interface.  This makes it even easier to extend.  See the Docs for
	more details.

	* Added CCPDB class for ConCatenated PDBs.  You can now treat
	these as a Trajectory.

	* Added PDBTraj class for handling non-contiguous PDBs as a
	trajectory.  Provide it with a printf-style format for generating
	frame names and a range of frame numbers to use, and it will allow
	you to access them as a Trajectory.

	* Added TinkerArc class for treating TinkerArc files (concatenated
	XYZ files) as a Trajectory.

	* Fixed problem with namespace collision with Boost in
	Tools/svd.cpp

	* Changed Atom defaults to initialize atomid and resid to 1,
	rather than -1.

2008-08-05    <tromo@spade.biophysics.rochester.edu>

	* Added tool to compute the RMSD between a selection and its
	average structure over the course of a trajectory.

2008-08-04    <tromo@spade.biophysics.rochester.edu>

	= BUGS =
	
	* Fixed problem with LOOS-wide typedefs affecting MacOS 10.5

	* Fixed minor bugin Atom class where setting coordinates using a
	GCoord ref doesn't correctly set the coords-bit,
	i.e. "foo.coords() = c;" will not register that the coords have
	been set.

	* Fixed minor bug in Tools/aligner where the first frame of the
	output DCD was not transformed.

	* Fixed moderate bug in AtomicGroup::splitByMolecule() where the
	PeriodicBox was not propagated beyond the first group split.

	* Fixed moderate bug in Tools/svdcolmap that affected certain
	instances of using atomid maps.

	* Fixed severe bug in loos::iterativeAlignment() where the
	returned vector<XForms> were incorrect.  The passed ensemble of
	AtomicGroups were correctly transformed, but anything that used
	the XForms would be affected to varying degrees.

	= NEW & IMPROVED =
	
	* Added improved self-tests for alignment routines.

	* Added support for log-scaling magnitudes in Tools/svdcolmap.

	* Added a new tool to reimage a DCD by molecule.

	* Added AtomicGroup::apply() to call a functor or function pointer
	on each Atom in an AtomicGroup.

	* Changed dcdwriter so that it no longer requires you to specify
	the number of frames that will be written.  Instead, it will
	automatically update the header with the current number of frames
	and then append the frame to the end of the trajectory.
