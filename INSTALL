Building and Installing Loos
----------------------------

*** FOR THE IMPATIENT ***



= Building and Installing =

Please refer to the OS-specific instructions below in order to satisfy
LOOS' dependencies....

LOOS can then be built using the following command:

   scons release=1

Or installed (to /opt as a default):
   sudo scons release=1 install

To install in a user-specified location:

   scons release=1 PREFIX=/path/to/install install


= Parallel (Multithreaded) ATLAS =

If you have a full install of ATLAS including threaded versions of the
BLAS and LAPACK, you can link against these to take advantage of
multiple cores in LOOS.  Copy the custom.py-proto to custom.py and
uncomment/change the appropriate lines.

The MacOS version by default uses the vecLib framework which is
already multithreaded.




------= Fedora =------

LOOS has been tested on Fedora (64-bit) 8, 9, 12, and 14.  We assume you
already have the basic compiler tools installed (i.e. g++).  You will
need to install scons, boost, and atlas:

sudo yum install scons.noarch boost-devel.x86_64 atlas-devel.x86_64


------= Ubuntu =------

LOOS has been tested on Ubuntu 8-10.  The following instructions have
been used to install LOOS on a fresh 64-bit 10.10 installation.  Use
the Ubuntu software center (or apt-get) to install the following
packages:
	g++
	scons
	libboost-all-devel
	libatlas-dev
	libatlas-base-dev

Optionally, you can install a machine-specific atlas, however, you
must still install the packages above.  For example, on an i7 machine,
install both atlas packages listed above as well as
libatlas3gf-corei7sse3.


NOTE: Ubuntu 10.04 LTS x86_64 uses libboost1.40-all-dev instead of
libboost-all-devel.

NOTE:  Older version of Ubuntu may vary the names of the BOOST
libraries.  If you see link errors related to boost libraries, then
you will need to setup a custom.py file.  Copy the custom.py-proto to
custom.py and find the appropriate library names (in /usr/lib64) and
edit the custom.py file to reflect these names.

* The following additional installation tips come courtesy of Dow
  Hurst:

To get the most currently available version of scons for Ubuntu Hardy 8.04 you have to add a
PPA repository.  Do this by getting the server key first, and then add the repository to the
/etc/apt/sources.list file.  The command and repository listing is below:

sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B5140445

# grep geek /etc/apt/sources.list
#  Added medigeek experimental repository on 20100622, done by Dow Hurst
deb http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main 
deb-src http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main

apt-get update

apt-get install scons libboost-dev libboost-date-time-dev libboost-doc libboost-filesystem-dev libboost-graph-dev \
                libboost-iostreams-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev  \
                libatlas-base-dev libatlas-headers liblapack-dev

Copy custom.py-proto to custom.py

Modify custom.py for the BOOSTREGEX and BOOSTPO variables so the lines look like this:

### This is the name of the boost-regex library
## Uncomment the following for Ubuntu
BOOSTREGEX='boost_regex-mt'


### This is the name of the boost-program-options Library
## Uncomment the following for Ubuntu
BOOSTPO='boost_program_options-mt'

Then issue the following command using sudo:

sudo scons release=1 PREFIX=/opt/LOOS-1.5.4 install

If you have root access then you can forget the sudo and issue the command without it.

------= Debian =------

Loos has been tested with: 5.0.6

Using the synaptic manager (or apt-get), install the following packages:
      libboost-dev
      scons
      libatlas-base-dev
      libatlas-headers
      libatlas3gf-base (optional)


------= openSUSE =------

LOOS has been tested with: 11.3

There is no pre-built ATLAS package (that we could find) for
openSUSE.  LOOS will use the blas packages instead.  You will need to
install lapack, blas, boost, and SCons.  Using zypper (or your
favorite package manager), install the following:

   zypper install scons boost-devel lapack lapack3

You should get the blas as a dependency for lapack.  You may also have lapack3
installed by default, however we've found that lapack must also be installed
in order to build LOOS.



-----= MACOS X (10.4+) =-----

First, make sure you have the Developer's Tools (i.e. XCode)
installed.  You can find it on your MacOS X install disk or,
alternatively, you can sign up for a free account with the Apple
Developer's Connection and download the latest version.  Next, you
will need to install SCons (http://scons.org) and Boost
(http://boost.org) by visiting their websites, downloading the
software, and following their installation instructions.


-----= CYGWIN =-----

Tested versions: 1.7.7

You will need to install libboost-devel and liblapack-devel along with
the g++ compiler using the cygwin setup.exe program.  (Note: if loos
still does not build, try installing the additional lapack and boost
packages).  There is no atlas package that we could find for cygwin,
so the native lapack/blas will be used instead.

There is no scons install option from setup.exe, so you need to
manually download the latest scons distribution from
http://www.scons.org/download.php (the gzip tar file) and install it.

The boost libraries cygwin uses have different names than what the
default build of LOOS expects.  You will need to set up a new
custom.py file.  Copy the "custom.py-proto" file in the loos directory
to "custom.py".  Look for the BOOSTPO and BOOSTREGEX symbols and
uncomment the appropriate lines.






*** GENERAL NOTES ***

There is some variability in the naming used for the Boost libraries.
If your build fails even though you just installed the latest Boost,
check the names of the regex and program_options libraries and set
these in your "custom.py" file.

If you're using a compiler in a non-standard location (e.g. you have
your own build of the latest and greatest gcc), SCons may not be using
it even though your $PATH is set correctly.  You can force which
compiler is used to build LOOS by setting the CXX variable in your
"custom.py" file.  You may also need to specify the "LIBXTRA" path...

SCons supports building LOOS in parallel.  If you have 4 cores, for
example, use "scons -j4" to use all 4 cores.

Prebuilt documentation for LOOS is provided as part of the
distribution.  This is simply copied into the install directory as
part of installation.  Should you want to build a new version of the
documentation, Doxygen is required.  Moreover, due to an issue we ran
into with SCons, documentation building and installation are
decoupled.  What this means is that you must explicitly build the docs
(i.e. "scons docs") and -then- install, "scons install".  Running
"scons install" will -not- rebuild the documentation, even if it out
of date (or nonexistent).
