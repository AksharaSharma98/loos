Building and Installing Loos
----------------------------

*** FOR THE IMPATIENT ***



= Building and Installing =

Please refer to the OS-specific instructions below in order to satisfy
LOOS' dependencies....

LOOS can then be built using the following command:

   scons release=1

Or installed (to /opt as a default):
   sudo scons release=1 install

To install in a user-specified location:

   scons release=1 PREFIX=/path/to/install install



------= Fedora =------

LOOS has been tested on Fedora 8, 9, 12, and 14.  We assume you
already have the basic compiler tools installed (i.e. g++).  You will
need to install scons, boost, and atlas:

sudo yum install scons.noarch boost-devel.x86_64 atlas-devel.x86_64

------= Ubuntu =------

You will need to install SCons, lapack, atlas, and boost.  Using
aptitude (or your favorite tool), install the "libboost-dev" package
(or a specific version (i.e. libboost1.38-dev)), "libatlas-base-dev",
"libatlas-headers", "liblapack-dev", and "scons".  On some systems,
the names of the boost libraries vary.  In these cases, you will need
to use a custom configuration.  Copy "custom.py-proto" to "custom.py"
and edit it, uncommenting the lines marked for Ubuntu.
Alternatively, verify the names of the boost regex and program_options
libraries and set these appropriately in your "custom.py" file.

* The following additional installation tips come courtesy of Dow
  Hurst:

To get the most currently available version of scons for Ubuntu Hardy 8.04 you have to add a
PPA repository.  Do this by getting the server key first, and then add the repository to the
/etc/apt/sources.list file.  The command and repository listing is below:

sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com B5140445

# grep geek /etc/apt/sources.list
#  Added medigeek experimental repository on 20100622, done by Dow Hurst
deb http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main 
deb-src http://ppa.launchpad.net/medigeek/experimental/ubuntu hardy main

apt-get update

apt-get install scons libboost-dev libboost-date-time-dev libboost-doc libboost-filesystem-dev libboost-graph-dev \
                libboost-iostreams-dev libboost-program-options-dev libboost-python-dev libboost-regex-dev  \
                libatlas-base-dev libatlas-headers liblapack-dev

Copy custom.py-proto to custom.py

Modify custom.py for the BOOSTREGEX and BOOSTPO variables so the lines look like this:

### This is the name of the boost-regex library
## Uncomment the following for Ubuntu
BOOSTREGEX='boost_regex-mt'


### This is the name of the boost-program-options Library
## Uncomment the following for Ubuntu
BOOSTPO='boost_program_options-mt'

Then issue the following command using sudo:

sudo scons release=1 PREFIX=/opt/LOOS-1.5.4 install

If you have root access then you can forget the sudo and issue the command without it.



------= openSUSE =------

There is no pre-built ATLAS package (that we could find) for
openSUSE.  LOOS will use the blas packages instead.  You will need to
install lapack, blas, boost, and SCons.  Using zypper (or your
favorite package manager), install the following:

   zypper install scons boost-devel lapack blas



-----= MACOS X (10.4+) =-----

First, make sure you have the Developer's Tools (i.e. XCode)
installed.  You can find it on your MacOS X install disk or,
alternatively, you can sign up for a free account with the Apple
Developer's Connection and download the latest version.  Next, you
will need to install SCons (http://scons.org) and Boost
(http://boost.org) by visiting their websites, downloading the
software, and following their installation instructions.




*** GENERAL NOTES ***

There is some variability in the naming used for the Boost libraries.
If your build fails even though you just installed the latest Boost,
check the names of the regex and program_options libraries and set
these in your "custom.py" file.

If you're using a compiler in a non-standard location (e.g. you have
your own build of the latest and greatest gcc), SCons may not be using
it even though your $PATH is set correctly.  You can force which
compiler is used to build LOOS by setting the CXX variable in your
"custom.py" file.  You may also need to specify the "LIBXTRA" path...

SCons supports building LOOS in parallel.  If you have 4 cores, for
example, use "scons -j4" to use all 4 cores.

Prebuilt documentation for LOOS is provided as part of the
distribution.  This is simply copied into the install directory as
part of installation.  Should you want to build a new version of the
documentation, Doxygen is required.  Moreover, due to an issue we ran
into with SCons, documentation building and installation are
decoupled.  What this means is that you must explicitly build the docs
(i.e. "scons docs") and -then- install, "scons install".  Running
"scons install" will -not- rebuild the documentation, even if it out
of date (or nonexistent).
