		       LOOS COMPATIBILITY TABLE
		       ------------------------

------------------------------------------
|    OS             | Core LOOS | PyLOOS |
|-------------------|-----------|--------|
| Fedora 12         |     +     |   !    |
| Fedora 13         |     +     |   !    |
| Fedora 14         |     +     |   +    |
| Fedora 15         |     +     |   +    |
| Fedora 16         |     +     |   +    |
| Fedora 17         |     +     |   +    |
| Fedora 18         |     +     |   +    |
|-------------------|-----------|--------|
| Ubuntu 8.04 LTS   |     !     |   !    |
| Ubuntu 10.04 LTS  |     +     |   !    |
| Ubuntu 11.10      |     +     |   !    |
| Ubuntu 12.04 LTS  |     +     |   +    |
| Ubuntu 12.10      |     +     |   +    |
|-------------------|-----------|--------|
| Debian 5          |     +     |   -    |
| Debian 6          |     +     |   !    |
| Debian 7.1        |     +     |   +    |
|-------------------|-----------|--------|
| CentOS 5.9        |     +     |   !    |
| CentOS 6.4        |     +     |   !    |
|-------------------|-----------|--------|
| OpenSUSE 11.4     |     +     |   -    |
| OpenSUSE 12       |     +     |   +    |
|-------------------|-----------|--------|
| FreeBSD 8         |     +     |   -    |
|-------------------|-----------|--------|
| Windows XP        |     +     |   -    |
|  +Cygwin 1.7.7    |           |        |
| Windows 7 64-bit  |     +     |   -    |
|  +Cygwin 1.7.15-1 |           |        |
|-------------------|-----------|--------|
| MacOS 10.6        |     +     |   !    |
| MacOS 10.7        |     +     |   !    |
| MacOS 10.8        |     +     |   !    |
|-------------------|-----------|--------|


+ = supported
    (dependencies easily available via package manager)

! = supported with reservations
    (may require manual installation of dependencies)

- = not supported at this time



				   
		     Building and Installing Loos
		     ----------------------------
		      *** FOR THE IMPATIENT ***



		     = Building and Installing =

Please refer to the OS-specific instructions below in order to satisfy
LOOS' dependencies....

LOOS can then be built using the following command:

   scons release=1

Or installed (to /opt as a default):
   sudo scons release=1 install

To install in a user-specified location:

   scons release=1 PREFIX=/path/to/install install

To use LOOS, your environment must be first setup:
  (bash)   source /path/to/loos/setup.sh
  (tcsh)   source /path/to/loos/setup.csh


			     = PyLOOS =

The Python interface to LOOS is currently a beta-release.  To build
it, use:
    scons pyloos=1

The python interface may also be installed:
    scons pyloos=1 install

Finally, if you want to try out *only* PyLOOS and nothing else,
    scons pyloos_only

PyLOOS requires a recent version of SWIG (2.0+).  Not all operating
systems are currently supported.  Additionally, the interface and
subsequent functionality may change significantly in future releases.

Note that the python scripts in Packages/PyLOOS are not installed.
These are currently only examples of how to use PyLOOS.


		    = NetCDF Amber Trajectories =

LOOS now supports a subset of the Amber NetCDF convention 1.0-B.  Only
coordinates are retrieved and are converted into the default LOOS data
type (i.e. doubles).  Periodic boxes are assumed to be orthogonal and
the angles are currently ignored.

If the netcdf libraries are installed, these will be automatically
detected by SCons and included in the build.  When opening an amber
trajectory file, LOOS will determine if it is a NetCDF file or an
ASCII MDCRD file and act appropriately.

If the netcdf libraries and headers are installed in a non-standard
location, edit the NETCDFINC and NETCDFLIB variables in your custom.py
file to point to the appropriate locations.

		  = Parallel (Multithreaded) ATLAS =

If you have a full install of ATLAS including threaded versions of the
BLAS and LAPACK, you can link against these to take advantage of
multiple cores in LOOS.  Copy the custom.py-proto to custom.py and
uncomment/change the appropriate lines.

The MacOS version by default uses the vecLib framework which is
already multithreaded.


========================================================================


			------= Fedora =------

LOOS has been tested on Fedora (64-bit) 12-18.  We assume
you already have the basic compiler tools installed (i.e. g++).  You will
need to install scons, boost, and atlas:

sudo yum install scons boost-devel atlas-devel

[optional]
For Amber NetCDF support, also install the netcdf development package:

sudo yum install netcdf-devel


* PyLOOS *

Fedora 12: Install pcre-devel and download and build the latest swig
  (2.0.4 or later).

Fedora 13: Yum install pcre-devel and python-devel, then download and install
  swig-2.0.4 (or later).

Fedora 14-18: Yum install python-devel and swig



			------= CentOS =------

LOOS has been tested with CentOS 5 and 6.  Follow the instructions for
Fedora, however there is no scons package available via yum.  Instead,
download and install any version of scons more recent than 1.0.



* PyLOOS *

CentOS 5.7, 6.2: Yum install python-devel and pcre-devel, then download
  and install the latest swig.

			------= Ubuntu =------

LOOS has been tested on Ubuntu 8-12.  The following instructions have
been used to install LOOS on a fresh 64-bit 12.04 installation.  Use
the Ubuntu software center (or apt-get) to install the following
packages:
	g++ (GNU C++ compiler)
	scons (replacement for make)
	libboost-all-devel (Boost C++ Libraries development files (ALL))
	libatlas-dev (Automatically Tunes Linear Algebra Software, C Header Files)
	libatlas-base-dev (Automatically Tuned Linear Algebra Software)
	libnetcdf-dev [optional] (Development kit for Netcdf)

* Ubuntu 12.10 *

On the test installation, there was a warning on installing boost.  It
was necessary to click on "Repair" twice before boost was successfully
installed.

* Ubuntu 10.04 LTS *

Ubuntu 10.04 LTS uses libboost1.40-all-dev instead of
libboost-all-devel for a package name.

* Ubuntu 8.04 LTS *

Do not install scons using the package manager--the available version
is incompatable with LOOS.  Instead, download any version >= 1.0 and
install that.  Also, there is no boost-all package, so you must
install the components separately: libboost-dev, libboost-regex-dev,
and libboost-program-options-dev




* PyLOOS *

Ubuntu 12.04 LTS & 12.10: Install swig using software center or apt-get.

Ubuntu 11.10 & 10.04 LTS: PyLOOS requires a very recent version of
  SWIG.  While it may appear that the swig 2.0.4 is available through
  the synaptics package manager, it is really 1.3.40 and will not work
  with PyLOOS.  First install the libpcre-dev, then download, build,
  and install the latest version of swig.


Ubuntu 8.04 LTS: Install python-dev and follow the instructions above.


			------= Debian =------

Loos has been tested with: 5, 6, 7

Using the synaptic manager (or apt-get), install the following packages:
      libboost-dev [may be called libbost-all-dev]
      scons
      libatlas-base-dev
      libatlas-headers [May be required for Debian 5]
      libnetcdf-dev [optional]


* PyLOOS *

Debian 5: NOT SUPPORTED
Debian 6: Install libpcre-dev and python-dev, then *download* and
  install the latest swig.
Debian 7: Install libpcre-dev, python-dev, and swig

		       ------= openSUSE =------

LOOS has been tested with: 11, 12

There is no pre-built ATLAS package (that we could find) for
openSUSE.  LOOS will use the blas packages instead.  You will need to
install lapack, blas, boost, and SCons.  Using zypper (or your
favorite package manager), install the following:

   zypper install scons boost-devel lapack lapack3

You should get the blas as a dependency for lapack.  You may also have lapack3
installed by default, however we've found that lapack must also be installed
in order to build LOOS.


[Optional]
For Amber NetCDF trajectory support, install the netcdf development package,
   zypper install libnetcdf-devel


* PYLOOS *

OpenSUSE 12.1: zypper install python-devel swig
OpenSUSE 11.4: NOT SUPPORTED


			-----= MACOS X =-----

***NOTE on MacOS 10.8 (Mountain Lion) compatability***
***only LOOS 2.0.1 (or more recent) is compatible***

LOOS has been tested with MacOS 10.6 and 10.8, however, it *should* be
compatable with version 10.4 and later.

First, make sure you have the Developer's Tools (i.e. XCode)
installed.  You can find it on your MacOS X install disk or,
alternatively, you can sign up for a free account with the Apple
Developer's Connection and download the latest version.  Next, you
will need to install SCons (http://scons.org) and Boost
(http://boost.org) by visiting their websites, downloading the
software, and following their installation instructions.
Alternatively, use fink to install these packages.

* NetCDF *

Download and install the latest hdf5 and netcdf libraries.  If
necessary, set the NETCDFINC and NETCDFLIB variables in your custom.py
file to point to where netcdf is installed.

* PyLOOS *

PyLOOS is supported for MacOS 10.6 and later.  You will need to download
and install a recent version of SWIG first.  If you have installed Boost in a
non-standard location, you will need to make sure that the boost libraries are
in your DYLD_LIBRARY_PATH environment variable.  Note that we have not
explicitly tested LOOS with 10.7, but expect that it will work with minimal
effort.


			 -----= CYGWIN =-----

Tested versions: 1.7.7, 1.7.15-1

You will need to install libboost-devel and liblapack-devel along with
the g++ compiler using the cygwin setup.exe program.  (Note: if loos
still does not build, try installing the additional lapack and boost
packages).  There is no atlas package that we could find for cygwin,
so the native lapack/blas will be used instead.

There is no scons install option from setup.exe, so you need to
manually download the latest scons distribution from
http://www.scons.org/download.php (the gzip tar file) and install it.

The boost libraries cygwin uses have different names than what the
default build of LOOS expects.  You will need to set up a new
custom.py file.  Copy the "custom.py-proto" file in the loos directory
to "custom.py".  Look for the BOOSTPO and BOOSTREGEX symbols and
uncomment the appropriate lines.

[Optional]
To include support for Amber/NetCDF trajectory files, install the
libnetcdf-devel library using the cygwin setup.exe installer.


* PyLOOS *

Cygwin is NOT SUPPORTED


			-----= FreeBSD =-----

LOOS has been tested with FreeBSD 8.  You will need to install the gcc
suite, atlas, scons, and boost by whatever means you prefer (note:
LOOS was tested using the versions installed via ports).

* PyLOOS *

FreeBSD is NOT SUPPORTED

========================================================================


			*** GENERAL NOTES ***

There is some variability in the naming used for the Boost libraries.
If your build fails even though you just installed the latest Boost,
check the names of the regex and program_options libraries and set
these in your "custom.py" file.

If you're using a compiler in a non-standard location (e.g. you have
your own build of the latest and greatest gcc), SCons may not be using
it even though your $PATH is set correctly.  You can force which
compiler is used to build LOOS by setting the CXX variable in your
"custom.py" file.  You may also need to specify the "LIBXTRA" path...

SCons supports building LOOS in parallel.  If you have 4 cores, for
example, use "scons -j4" to use all 4 cores.

Prebuilt documentation for LOOS is provided as part of the
distribution.  This is simply copied into the install directory as
part of installation.  Should you want to build a new version of the
documentation, Doxygen is required.  Moreover, due to an issue we ran
into with SCons, documentation building and installation are
decoupled.  What this means is that you must explicitly build the docs
(i.e. "scons docs") and -then- install, "scons install".  Running
"scons install" will -not- rebuild the documentation, even if it out
of date (or nonexistent).
