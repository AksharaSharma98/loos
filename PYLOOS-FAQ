 ######:             ##         .####.    .####.    :####:  
 #######:            ##         ######    ######   :######  
 ##   :##            ##        :##  ##:  :##  ##:  ##:  :#  
 ##    ##  ##    ##  ##        ##:  :##  ##:  :##  ##       
 ##   :##  :##  ##   ##        ##    ##  ##    ##  ###:     
 #######:   ##: ##.  ##        ##    ##  ##    ##  :#####:  
 ######:    ###:##   ##        ##    ##  ##    ##   .#####: 
 ##         .## #    ##        ##    ##  ##    ##      :### 
 ##          ####.   ##        ##:  :##  ##:  :##        ## 
 ##          :###    ##        :##  ##:  :##  ##:  #:.  :## 
 ##           ##     ########   ######    ######   #######: 
 ##           ##.    ########   .####.    .####.   .#####:  
             :##                                            
            ###:                                            
            ###                                             



 ########    :##:     .####.  
 ########     ##      ######  
 ##          ####    :##  ##: 
 ##          ####    ##:  :## 
 ##         :#  #:   ##    ## 
 #######     #::#    ##    ## 
 #######    ##  ##   ##    ## 
 ##         ######   ##    ## 
 ##        .######.  ##:  :## 
 ##        :##  ##:  :##  ##  
 ##        ###  ###   ######. 
 ##        ##:  :##   .#####  
                         .##: 
                          .#  
                              
                              



NOTE: This FAQ is specific to the Python interface to LOOS (PyLOOS).
This interface is begin released as a beta-version and, as such, it
may change significantly in future releases.  Please report any bugs
found to "loos-maintainer@urmc.rochester.edu".  Similarly, please feel
free to contact us regarding new functionality or better
implementations.



----------------------------------------------------------------------------

A.	* Building and Using *

1.	What operating systems support PyLOOS?
	Only LINUX is supported at this time.  For specific versions,
	see the start of the INSTALL file.

2.	How do I build PyLOOS?
	You will need to install a recent version of Swig.  For
	details specific to your OS, please see the INSTALL file.
	PyLOOS is not part of the default build for LOOS.  You must
	tell SCons to build it by saying "scons pyloos".

3.	How do I use PyLOOS?
	Your environment needs to be setup to allow Python to locate
	the PyLOOS libraries.  LOOS now provides two setup scripts,
	setup.sh for bash users, and setup.csh for tcsh users.  Source
	the appropriate script, then execute Python and import from
	loos.

4.	Can I install PyLOOS?
	We do not currently have an install mechanism for PyLOOS.
	However, once the setup script has been sourced, python will
	find it regardless of where you run Python.




B.	* Programming with PyLOOS *

1.	Setting parameters in LOOS objects
	In C++, it is possible to have two different methods for
	setting a parameter value,
		  GCoord c;
		  c.x() = 42;
		  c.x(42);
	In both cases, the X-coordinate is set to 42.  In Python,
	however, you must use the second form, c.x(42).

2.	Making copies of LOOS objects
	Remember that in Python, saying "a = b" does not actually copy
	b.  Python has a "copy" package which supports a shallow copy
	using the copy() function and a deep copy using the deepcopy()
	function.  A shallow copy is similar to how a LOOS object would
	normally be copied in C++.  For example,

		  AtomicGroup A;
		  AtomicGroup B = A;

	In this case, B is a shallow copy of A.  That is, the atoms
	are shared between A and B.  However, B can contain a
	different set of atoms from A, e.g.

		  B.append(another_atom);

	Now B will have an extra atom that A will be lacking, but
	existing atoms will still be shared between A and B.  In
	contrast, in the PyLOOS equivalent,

		  A = AtomicGroup()
		  B = A
		  B.append(another_atom)

	A and B are the same and now both have the extra atom.  To
	make a copy of A that behaves like the C++ copy, use Python's
	copy package to make a shallow copy,

	          import copy
		  A = AtomicGroup()
		  B = copy.copy(A)
		  B.append(another_atom)

	Now, B has an extra atom and existing atoms are shared.

	Since atoms are shared in a shallow copy of an AtomicGroup,
	modifying the atom in one group will modify the atom in all
	groups that contain that atom.

	          import copy
		  an_atom = Atom(1, "CA", GCoord(1,2,3))
	          A = AtomicGroup()
		  A.append(an_atom)

		  B = copy.copy(A)
		  B[0].id(42)

	Here, we've created an atom, appended it to AtomicGroup A,
	then made a shallow copy into AtomicGroup B.  However, atoms
	are shared between AtomicGroups that have been
	shallow-copied.  Therefore, when the atomid of the first atom
	in B is changed, since the atom is shared between A and B,
	both groups see the change.  Sometimes, it is necessary to
	have a separate copy of a group so that changes to the atom in
	group B will not affect group A.  This requires a deep copy,

	          import copy
		  an_atom = Atom(1, "CA", GCoord(1,2,3))
		  A = AtomicGroup()
		  A.append(an_atom)

		  B = copy.deepcopy(A)
		  B[0].id(42)

	Here, the atoms are no longer shared...each group has its own
	copy of the atom.  Therefore, changing the atomid of the first
	atom in group B does NOT change the first atom in group A.
	This is equivalent to using the AtomicGroup::copy() function
	in C++.

3.	Why are my GCoords changing on me?
	See #2 above...  Remember that saying "a = b" in Python does
	NOT copy the GCoord so when you change a, you're also changing
	b.  Use "a = copy(b)" to get a new GCoord that's a copy of the
	existing one.

4.	What objects support copying?
	Currently, Atom, GCoord, and AtomicGroup support copying.  For
	Atom and GCoord, copy() and deepcopy() are functionally
	equivalent.

5.	How do I use the iterativeAlignment functions?
	We do not currently have a direct interface to the C++
	iterativeAlignment functions since they return a boost::tuple
	object.  Instead, there are python-specific routines that
	return an object containing the same information, i.e.
	       
	           result = iterativeAlignmentPy(model, traj)
		   xforms = result.transforms
		   final_rmsd = result.rmsd
		   n = result.iterations

	The python versions have the same interface as the C++ ones,
	but the function names are suffixed with "Py".

6.	Where did pAtoms go in PyLOOS?
	Swig maps the boost shared pointer (pAtom) into the name
	"Atom".  So, wherever you would use a pAtom in the C++ version
	of your code, simply use Atom in PyLOOS.

7.	Are there any examples of using PyLOOS?
	Yes.  Look in the Packages/PyLOOS directory.  We will be
	adding more examples in future releases.

8.	Where are the matrix operations?
	We currently assume that matrix operations are better handled
	by the appropriate Python package (e.g. numpy).
