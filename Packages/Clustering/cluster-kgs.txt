usage:
cluster-kgs < similarity_scores.asc > clustering_results.json

kgsclus mimics the clustering aspect of the NMRCLUST utility that is incorporated as part of the OLDERADO webserver for structural biology informatics. It was originally published as:
Kelly, Gardner, and Sutcliffe, Prot. Eng. 9 11 1063-1065 (1996)
This type of clustering exists in other places, most notably in R, and has been put to many uses beside clustering protein structures with their RMSD as the distance between each structure. It is called cluster-kgs because this method is referred to in other contexts (that is, where it is not being used to analyze NMR ensembles) as kgs clustering, and because this executable operates on a provided similarity matrix it is similarly flexible. Note that we do not implement the 'eigen analysis' for cluster center determination, instead choosing to use the element from each cluster with the lowest mean distance to the other elements in the cluster. 

The tool works by reading in a similarity score matrix from a file (or stdin) and writing the clustering results to stdout. The results report the index of each cluster, with all the elements in each cluster following its index on the same line. It will also provide an exemplar (the element nearest the centroid) for each cluster in a separate block. The input matrix should be an NxN symmetric matrix of similarity scores where the ij-th element is the similarity between datum i and datum j. The similarity score matrix is expected to be whitespace delimited in the column and newline delimited in the row. '#' is an acceptable comment character, but only produces a comment-read at the beginning of a line (not at any point in a line, like a comment in a shell script).

In order to mimic the functionality of the OLDERADO tool mentioned above, one can use the loos tool rmsds (or similar) to produce the matrix of similarity scores. 
For example: 

$ rmsds model.pdb ensemble.dcd | cluster-kgs -s > clustering_results.json

would use rmsds to compute the alpha carbon RMSDs from the frame-pairs in ensemble.dcd to generate the similarity matrix, then redirect it to cluster-kgs, which will read from stdin because the -s flag was thrown. Then the clustering results are written to an output file (which should be valid JSON, for convenient further scripting). This shell-redirect would also cause the distance matrix from rmsds to be written to stderr. Note that in this particular command line the RMSD values emitted by rmsds will be in angstroms, and will be rounded to 2 digits. For more reported precision (rmsds uses doubles internally), use the '-p' flag. If you would like to both save the similarities generated in this way, but also not have them written to disk before feeding them to the clustering algorithm, you can redirect stderr and stdout to separate files:

$ rmsds model.pdb ensemble.dcd | cluster-kgs -s 1> clustering_results.json 2>distances.asc

You can also read a distance matrix from a file using the -f flag. If you do that, it will not be emitted to stderr, and you would write:
cluster-kgs -f distances.asc > clustering_results.json

The output from the clustering will be structured as JSON, and will have four keys. One will be the invocation header, to help record where the data came from. Then one recording which stage of the clustering was chosen as the cutoff stage. One recording the penalty values at each stage (they could potentially be quite similar). One will be a list (in no particular order) of the clusters, where each cluster will be a list of element indexes corresponding to the members of that cluster. Finally the last will be a list of exemplars for each cluster. These will be in the same order as the list of clusters, so the first exemplar in the list is the exemplar for the first cluster in the cluster list.