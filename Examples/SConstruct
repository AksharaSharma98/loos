#!/usr/bin/env python
#
# (c) 2008-2009 Tod D. Romo
#
# Grossfield Lab
# Department of Biochemistry & Biophysics
# University of Rochester Medical School
#
#


import sys
import os

# This can be reset in custom.py or here...

default_lib_path = '/usr/lib64'

### Tell SCons where to find LOOS
### This assumes you have installed LOOS.  If you have not,
### you will need to change the LOOSINC and LOOSLIB variables below and
### change the default path...
default_path_to_loos = '/opt/loos'

# Principal options...
clos = Options('custom.py')
clos.AddOptions(
	('debug', 'Set to 1 to add -DDEBUG to build', 0),
	('release', 'Set to 1 to build with optimization on', 0),
        ('profile', 'Set to 1 to build with profiling on', 0)
)

clos.Add(PathOption('LOOS', 'Path to LOOS', default_path_to_loos, PathOption.PathAccept))
clos.Add(PathOption('LAPACK', 'Path to LAPACK', default_lib_path, PathOption.PathAccept))
clos.Add(PathOption('ATLAS', 'Path to ATLAS', default_lib_path + '/atlas', PathOption.PathAccept))
clos.Add(PathOption('ATLASINC', 'Path to ATLAS includes', '/usr/include/atlas', PathOption.PathAccept))
clos.Add(PathOption('BOOSTLIB', 'Path to BOOST libraries', default_lib_path, PathOption.PathAccept))
clos.Add(PathOption('BOOSTINC', 'Path to BOOST includes', '/usr/include', PathOption.PathAccept))
clos.Add('BOOSTREGEX', 'Boost regex library name', 'boost_regex', PathOption.PathAccept)
clos.Add('BOOSTPO', 'Boost program options library name', 'boost_program_options', PathOption.PathAccept)
clos.Add('CXX', 'C++ Compiler', 'g++')
clos.Add(PathOption('LIBXTRA', 'Path to additional libraries', '', PathOption.PathAccept))

env = Environment(options = clos)
Help(clos.GenerateHelpText(env))

platform = sys.platform
env['platform'] = platform

LAPACK = env['LAPACK']
ATLAS = env['ATLAS']
ATLASINC = env['ATLASINC']
BOOSTLIB = env['BOOSTLIB']
BOOSTINC = env['BOOSTINC']
BOOSTREGEX = env['BOOSTREGEX']
BOOSTPO = env['BOOSTPO']
LOOS = env['LOOS']

### These variables point to the subparts of LOOS required to build a tool.

LOOSINC = LOOS + '/include'
LOOSLIB = LOOS + '/lib'

### Use the following if you want to build without having installed LOOS
#LOOSINC = LOOS
#LOOSLIB = LOOS



### Autoconf
if not env.GetOption('clean'):
   conf = Configure(env)
   if not conf.CheckType('ulong','#include <sys/types.h>\n'):
      conf.env.Append(CCFLAGS = '-DREQUIRES_ULONG')
   if not conf.CheckType('uint','#include <sys/types.h>\n'):
      conf.env.Append(CCFLAGS = '-DREQUIRES_UINT')
   env = conf.Finish()



### Compile-flags

debug_opts='-g -Wall -Wextra -fno-inline'
release_opts='-O3 -DNDEBUG -Wall'
profile_opts='-pg'

# Setup the general environment...
env.Append(CPPPATH = ['#', LOOSINC, BOOSTINC])
env.Append(LIBPATH = ['#', LOOSLIB, BOOSTLIB])
env.Append(LIBS = ['loos', BOOSTREGEX, BOOSTPO])

# Platform specific build options...
if platform == 'darwin':
   env.Append(LINKFLAGS = ' -framework vecLib')
else:
   if platform == 'linux2':
      env.Append(LIBS = ['lapack', 'atlas'])
      env.Append(LIBPATH = [LAPACK, ATLAS])
      env.Append(CPPPATH = [ATLASINC]) 


# Determine what kind of build...
# No option implies debugging, but only an explicit debug defines
# the DEBUG symbol...  Yes, it's a bit obtuse, but it allows
# you to control the level of debugging output through the
# DEBUG definition...

release = int(env['release'])
debug = int(env['debug'])
profile = int(env['profile'])

# If debug is requested, make sure there is no optimization...
if (debug > 0):
   release=0

if int(release):
    env.Append(CCFLAGS=release_opts)
else:
   env.Append(CCFLAGS=debug_opts)

if (debug > 0):
   env.Append(CCFLAGS=" -DDEBUG=$debug")

# Profiling is independent of release/debug status...
if int(profile):
   env.Append(CCFLAGS=profile_opts)
   env.Append(LINKFLAGS=profile_opts)


# Allow overrides from environment...
if os.environ.has_key('CXX'):
   CXX = os.environ['CXX']
   print "Changing default compiler to ", CXX
   env['CXX'] = CXX

if os.environ.has_key('CCFLAGS'):
   CCFLAGS = os.environ['CCFLAGS']
   print "Changing CCFLAGS to ", CCFLAGS
   env['CCFLAGS'] = CCFLAGS

# Export for subsidiary SConscripts
Export('env')

SConscript('SConscript')
